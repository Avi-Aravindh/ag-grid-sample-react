[{"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/index.js":"1","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/App.js":"2","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/reportWebVitals.js":"3","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/context/AppProvider.js":"4","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/context/AppContext.js":"5","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/PrivateRoute.js":"6","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Orders.js":"7","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Login.js":"8","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Profile.js":"9","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Users.js":"10","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/Theme.js":"11","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/authenticate.js":"12","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/BulkUpdateDialog.js":"13","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/ActionCellRenderer.js":"14","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CustomDropdown.js":"15","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/generateExcel.js":"16","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/constants.js":"17","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/FileUploadDialog.js":"18","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/dataCalls.js":"19","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/ColumnCellRenderer.js":"20","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/NumericEditor.js":"21","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/DialogEditor.js":"22","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CurrencyEditor.js":"23","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CustomDialog.js":"24","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/AddNewUser.js":"25","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/ItemTypes.js":"26"},{"size":730,"mtime":1612658281996,"results":"27","hashOfConfig":"28"},{"size":14570,"mtime":1612667336615,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1612657966037,"results":"30","hashOfConfig":"28"},{"size":1357,"mtime":1612658486033,"results":"31","hashOfConfig":"28"},{"size":98,"mtime":1612658486032,"results":"32","hashOfConfig":"28"},{"size":1043,"mtime":1612658384770,"results":"33","hashOfConfig":"28"},{"size":24016,"mtime":1612663041493,"results":"34","hashOfConfig":"28"},{"size":18083,"mtime":1612664543080,"results":"35","hashOfConfig":"28"},{"size":109,"mtime":1612658353710,"results":"36","hashOfConfig":"28"},{"size":15499,"mtime":1612658353710,"results":"37","hashOfConfig":"28"},{"size":224,"mtime":1612661050966,"results":"38","hashOfConfig":"28"},{"size":925,"mtime":1612658309242,"results":"39","hashOfConfig":"28"},{"size":8073,"mtime":1612664838296,"results":"40","hashOfConfig":"28"},{"size":3421,"mtime":1612663775679,"results":"41","hashOfConfig":"28"},{"size":1169,"mtime":1612658384768,"results":"42","hashOfConfig":"28"},{"size":902,"mtime":1612658309257,"results":"43","hashOfConfig":"28"},{"size":2154,"mtime":1612665630600,"results":"44","hashOfConfig":"28"},{"size":20958,"mtime":1612664838296,"results":"45","hashOfConfig":"28"},{"size":2716,"mtime":1612658309259,"results":"46","hashOfConfig":"28"},{"size":8753,"mtime":1612661050967,"results":"47","hashOfConfig":"28"},{"size":3816,"mtime":1612658384768,"results":"48","hashOfConfig":"28"},{"size":1485,"mtime":1612658384768,"results":"49","hashOfConfig":"28"},{"size":3962,"mtime":1612658384768,"results":"50","hashOfConfig":"28"},{"size":1241,"mtime":1612658384769,"results":"51","hashOfConfig":"28"},{"size":9457,"mtime":1612658384768,"results":"52","hashOfConfig":"28"},{"size":10526,"mtime":1612667373249,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"1cvj1u7",{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"57"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"57"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"57"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"57"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/index.js",["119","120","121","122"],"import React from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useLocation,\n} from 'react-router-dom';\n\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nimport AppProvider from './context/AppProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <Router>\n        <App />\n      </Router>\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["123","124"],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/App.js",["125","126","127","128","129","130","131","132"],"import { makeStyles, useTheme } from '@material-ui/core/styles';\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  AppBar,\n  ThemeProvider,\n} from '@material-ui/core';\nimport ImportantDevicesIcon from '@material-ui/icons/ImportantDevices';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport DevicesOtherIcon from '@material-ui/icons/DevicesOther';\nimport CategoryIcon from '@material-ui/icons/Category';\nimport ViewColumnIcon from '@material-ui/icons/ViewColumn';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\n\nimport React, { useContext, useState, useEffect } from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n  Link,\n  useLocation,\n  useHistory,\n} from 'react-router-dom';\n\nimport PrivateRoute from './components/PrivateRoute';\nimport AppContext from './context/AppContext';\nimport ItemTypes from './pages/ItemTypes';\nimport Login from './pages/Login';\nimport Orders from './pages/Orders';\nimport Users from './pages/Users';\nimport { AppTheme } from './utilities/Theme';\n\nconst drawerWidth = 200;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // display: 'flex',\n    // background: '#f5f7fd',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    backgroundColor: '#f5f7fd',\n    color: '#3B5096',\n    height: '60px',\n    // paddingLeft: '2%',\n    paddingRight: '2%',\n    // width: '95%',\n    // zIndex: '100',\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  appBarControls: {\n    display: 'flex',\n    flexDirection: 'row',\n    flexGrow: '1',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  headerActionContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  headerAction: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: '0.75rem',\n    fontWeight: 'bold',\n    textTransform: 'uppercase',\n    marginRight: '30px',\n    cursor: 'pointer',\n    transition: 'all 0.3s ease 0s',\n\n    '&:hover': {\n      opacity: 0.75,\n    },\n  },\n  userName: {\n    marginLeft: '5px',\n    height: '20px',\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    backgroundColor: '#232323',\n  },\n  drawerClose: {\n    color: 'white',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  drawerIcon: {\n    marginLeft: '20px',\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    // padding: theme.spacing(3),\n    background: '#f5f7fd',\n  },\n  list: {\n    marginTop: '50px',\n  },\n  listItemIcon: {\n    minWidth: '58px',\n  },\n  listItemText: {\n    fontFamily: 'Poppins',\n    fontWeight: '700',\n    fontSize: '2rem',\n    lineHeight: '2',\n  },\n\n  links: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: '25px',\n    fontFamily: 'Poppins',\n    fontSize: '0.75rem',\n    color: 'white',\n    cursor: 'pointer',\n    textTransform: 'uppercase',\n    textDecoration: 'none',\n    letterSpacing: '1px',\n    lineHeight: 2.5,\n    '&:hover': {\n      // backgroundColor: '#3B5096',\n      // color: 'white',\n      // borderRadius: '5px',\n    },\n    linkIcons: {\n      color: 'red',\n    },\n  },\n  linksActive: {\n    backgroundColor: '#3B5096',\n    // transitionDuration: '500ms',\n  },\n  linkIcons: {\n    color: '#3B5096',\n    marginLeft: '8px',\n    fontSize: '24px',\n  },\n  linkActiveIcons: {\n    color: 'white',\n    marginLeft: '8px',\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [logoutMenu, setLogoutMenu] = React.useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const location = useLocation();\n  const history = useHistory();\n  const appContext = useContext(AppContext);\n  const [isVerified, setIsVerified] = React.useState(appContext.isVerified);\n\n  useEffect(() => {\n    console.log('updating isverified', appContext);\n    setIsVerified(appContext.isVerified);\n  }, [appContext]);\n\n  console.log('Appcontext', appContext);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  const handleProfileClick = () => {\n    setLogoutMenu(false);\n    history.push('/profile');\n  };\n\n  return (\n    isVerified && (\n      <div className={classes.root}>\n        <ThemeProvider theme={AppTheme}>\n          <CssBaseline />\n          {appContext.isUserLoggedIn && (\n            <AppBar\n              position='fixed'\n              className={clsx(classes.appBar, {\n                [classes.appBarShift]: open,\n              })}\n            >\n              <Toolbar className={classes.appBarControls}>\n                <IconButton\n                  color='inherit'\n                  aria-label='open drawer'\n                  onClick={handleDrawerOpen}\n                  edge='start'\n                  className={clsx(classes.menuButton, {\n                    [classes.hide]: open,\n                  })}\n                >\n                  <MenuIcon />\n                </IconButton>\n\n                <div className={classes.appBarControls}>\n                  <div className='pageHeaderBlack'>\n                    Dunder<span className='pageHeader'>Mifflin</span>\n                  </div>\n\n                  <div className={classes.headerActionContainer}>\n                    <div className={classes.headerAction}>\n                      <div\n                        onClick={(event) => {\n                          setAnchorEl(event.target);\n                          setLogoutMenu(true);\n                        }}\n                      >\n                        <AccountCircleIcon />\n                      </div>\n                      <div\n                        className={classes.userName}\n                        onClick={(event) => {\n                          setAnchorEl(event.target);\n                          setLogoutMenu(true);\n                        }}\n                      >\n                        {appContext.currentUser.user_name}\n                      </div>\n                      <Menu\n                        id='simple-menu'\n                        anchorEl={anchorEl}\n                        keepMounted\n                        open={logoutMenu}\n                        onClose={() => {\n                          setLogoutMenu(false);\n                          setAnchorEl(null);\n                        }}\n                      >\n                        <MenuItem onClick={() => handleProfileClick()}>\n                          Profile\n                        </MenuItem>\n                        <MenuItem\n                          onClick={() => {\n                            localStorage.removeItem('token');\n                            window.location.reload();\n                            setLogoutMenu(false);\n                          }}\n                        >\n                          Logout\n                        </MenuItem>\n                      </Menu>\n                    </div>\n                  </div>\n                </div>\n              </Toolbar>\n            </AppBar>\n          )}\n          {appContext.isUserLoggedIn && (\n            <Drawer\n              variant='permanent'\n              BackdropProps={{ invisible: true }}\n              className={clsx(classes.drawer, {\n                [classes.drawerOpen]: open,\n                [classes.drawerClose]: !open,\n              })}\n              classes={{\n                paper: clsx({\n                  [classes.drawerOpen]: open,\n                  [classes.drawerClose]: !open,\n                }),\n              }}\n            >\n              <div className={classes.toolbar}>\n                <img\n                  src='./logo-white.png'\n                  width='40px'\n                  alt='logo'\n                  className={classes.drawerIcon}\n                />\n                <IconButton onClick={handleDrawerClose}>\n                  <ArrowLeftIcon style={{ color: 'white', fontSize: '2rem' }} />\n                </IconButton>\n              </div>\n              {/* <Divider /> */}\n              <List className={classes.list}>\n                <Link\n                  to='/orders'\n                  className={clsx(classes.links, {\n                    [classes.linksActive]: location.pathname.includes(\n                      '/orders'\n                    ),\n                  })}\n                >\n                  <ListItem>\n                    <ListItemIcon className={classes.listItemIcon}>\n                      <DevicesOtherIcon\n                        className={clsx(classes.linkIcons, {\n                          [classes.linkActiveIcons]: location.pathname.includes(\n                            '/orders'\n                          ),\n                        })}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary='Orders'\n                      className={classes.listItemText}\n                    />\n                  </ListItem>\n                </Link>\n                <Link\n                  to='/itemtypes'\n                  className={clsx(classes.links, {\n                    [classes.linksActive]: location.pathname.includes(\n                      '/itemtypes'\n                    ),\n                  })}\n                >\n                  <ListItem>\n                    <ListItemIcon className={classes.listItemIcon}>\n                      <ImportantDevicesIcon\n                        className={clsx(classes.linkIcons, {\n                          [classes.linkActiveIcons]: location.pathname.includes(\n                            '/itemtypes'\n                          ),\n                        })}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary='Item Types'\n                      className={classes.listItemText}\n                    />\n                  </ListItem>\n                </Link>\n                <Link\n                  to='/pallets'\n                  className={clsx(classes.links, {\n                    [classes.linksActive]: location.pathname.includes(\n                      '/pallets'\n                    ),\n                  })}\n                >\n                  <ListItem>\n                    <ListItemIcon className={classes.listItemIcon}>\n                      <ViewColumnIcon\n                        className={clsx(classes.linkIcons, {\n                          [classes.linkActiveIcons]: location.pathname.includes(\n                            '/pallets'\n                          ),\n                        })}\n                      />\n                    </ListItemIcon>\n                    <ListItemText\n                      primary='Palettes'\n                      className={classes.listItemText}\n                    />\n                  </ListItem>\n                </Link>\n\n                {appContext.currentUser.user_role === 'Admin' && (\n                  <Link\n                    to='/users'\n                    className={clsx(classes.links, {\n                      [classes.linksActive]: location.pathname.includes(\n                        '/users'\n                      ),\n                    })}\n                  >\n                    <ListItem>\n                      <ListItemIcon className={classes.listItemIcon}>\n                        <PeopleAltIcon\n                          className={clsx(classes.linkIcons, {\n                            [classes.linkActiveIcons]: location.pathname.includes(\n                              '/users'\n                            ),\n                          })}\n                        />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary='Users'\n                        className={classes.listItemText}\n                      />\n                    </ListItem>\n                  </Link>\n                )}\n              </List>\n            </Drawer>\n          )}\n          <main className={classes.content}>\n            {location.pathname !== '/login' && (\n              <div className={classes.toolbar} />\n            )}\n            <Switch>\n              <Route exact path='/' render={() => <Redirect to='/orders' />} />\n              <Route path='/login' component={Login}></Route>\n              <PrivateRoute path='/orders' component={Orders}></PrivateRoute>\n              <PrivateRoute\n                path='/itemtypes'\n                component={ItemTypes}\n              ></PrivateRoute>\n              <PrivateRoute path='/users' component={Users}></PrivateRoute>\n            </Switch>\n          </main>\n        </ThemeProvider>\n      </div>\n    )\n  );\n}\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/reportWebVitals.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/context/AppProvider.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/context/AppContext.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/PrivateRoute.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Orders.js",["133","134","135","136","137","138","139","140","141","142","143","144","145"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faUpload,\n  faTasks,\n  faPlus,\n  faTrash,\n  faCopy,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles, createStyles, useTheme } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Divider from '@material-ui/core/Divider';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport XLSX from 'xlsx';\n\nimport clsx from 'clsx';\n\nimport { useState, useEffect, useContext, useRef } from 'react';\n\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport ActionCellRenderer from '../components/ActionCellRenderer';\nimport BulkUpdateDialog from '../components/BulkUpdateDialog';\nimport CurrencyEditor from '../components/CurrencyEditor';\nimport CustomDialog from '../components/CustomDialog';\nimport CustomDropdown from '../components/CustomDropdown';\nimport DialogEditor from '../components/DialogEditor';\nimport FileUploadDialog from '../components/FileUploadDialog';\nimport NumericEditor from '../components/NumericEditor';\nimport AppContext from '../context/AppContext';\nimport { AppTheme } from '../utilities/Theme';\nimport { DATAURLS } from '../utilities/constants';\nimport {\n  fetchPut,\n  fetchPost,\n  fetchGet,\n  fetchDelete,\n} from '../utilities/dataCalls';\nimport { generateExcel } from '../utilities/generateExcel';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '95vw',\n      height: '93vh',\n      marginLeft: '4vw',\n      // marginTop: '80px',\n    },\n\n    buttonBox: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: '50%',\n    },\n    buttonArea: {\n      display: 'flex',\n    },\n    select: {\n      color: 'white',\n    },\n    sectionHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      // color: '#212121',\n      color: 'white',\n      fontWeight: 'bold',\n      fontSize: '1rem',\n      // marginTop: '20px',\n      width: '95%',\n      height: '40px',\n      boxShadow: '0px 0px 5px #222',\n      paddingLeft: '10px',\n      background: '#3B5096',\n      // background:\n      //   'linear-gradient(90deg, rgba(39,105,85,1) 55%, rgba(39,96,0,1) 100%)',\n    },\n    actionArea: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      width: '30%',\n    },\n    actionIconDisabled: {\n      color: '#aaa',\n      cursor: 'not-allowed',\n    },\n    actionIcon: {\n      fontSize: '1rem',\n      cursor: 'pointer',\n      color: 'white',\n    },\n\n    textRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n      height: '30px',\n    },\n    input: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n  })\n);\n\nconst frameworkComponents = {\n  //   CustomCellEditor: CustomCellEditor,\n  ActionCellRenderer,\n  NumericEditor,\n  CurrencyEditor,\n  DialogEditor,\n};\n\nconst Orders = () => {\n  const theme = useTheme(AppTheme);\n  const classes = useStyles(theme);\n  const appContext = useContext(AppContext);\n  const overlayLoadingTemplate =\n    '<span class=\"ag-overlay-loading-center\">Please wait while update in progress</span>';\n\n  const buildColumnDefinitions = (columnDefs, assetTypes) => {\n    return columnDefs.map((columnDef, index) => {\n      let columnDefinition = {\n        headerName: index !== 0 ? columnDef.header_name : '',\n        cellRenderer: index === 0 ? 'ActionCellRenderer' : false,\n        cellRendererParams: {\n          onRowEditingStopped: (params) => onRowEditingStopped(params),\n        },\n        headerCheckboxSelection: index === 0 ? true : false,\n        headerCheckboxSelectionFilteredOnly: true,\n        checkboxSelection: index === 0 ? true : false,\n        field: columnDef.field,\n        editable: true,\n        filter: index !== 0 ? 'agTextColumnFilter' : 'none',\n        sortable: true,\n        resizable: true,\n        hide: false,\n        width: index === 0 ? 100 : 'auto',\n        valueFormatter:\n          columnDef.type === 'currencyColumn' &&\n          ((params) => {\n            return params.value ? '\\xA3' + params.value : ' ';\n          }),\n      };\n      if (columnDef.field === 'status') {\n        columnDefinition.cellEditor = 'agSelectCellEditor';\n        columnDefinition.cellEditorParams = {\n          values: statusNames,\n        };\n      }\n      if (columnDef.type === 'numericColumn') {\n        columnDefinition.cellEditor = 'NumericEditor';\n      }\n      if (columnDef.type === 'currencyColumn') {\n        columnDefinition.cellEditor = 'CurrencyEditor';\n      }\n\n      return columnDefinition;\n    });\n  };\n\n  const [loading, setLoading] = useState(true);\n  const [pageSize, setPageSize] = useState(25);\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\n  const [snackBarMessage, setSnackBarMessage] = useState('');\n  const [customDeleteDialog, setCustomDeleteDialog] = useState(false);\n  const [customDialogTitle, setCustomDialogTitle] = useState('');\n  const [customDialogMessage, setCustomDialogMessage] = useState('');\n  const [snackBarType, setSnackBarType] = useState('success');\n  const [rowData, setRowData] = useState([]);\n  const [rowDataAPI, setRowDataAPI] = useState([]);\n  const [columnDefs, setColumnDefs] = useState([]);\n  const [assetTypes, setAssetTypes] = useState([]);\n  const [assetTypeFieldMapping, setAssetTypeFieldMapping] = useState([]);\n  const [statusCodes, setStatusCodes] = useState([]);\n  const [statusNames, setStatusNames] = useState([]);\n  const [palletNumbers, setPalletNumbers] = useState([]);\n  const [selectedAssetType, setSelectedAssetType] = useState('All');\n  const [bulkUpdateOpen, setBulkUpdateOpen] = useState(false);\n  const [fileUploadOpen, setFileUploadOpen] = useState(false);\n  const [enableBulkUpdates, setEnableBulkUpdates] = useState(false);\n  const [gridApi, setGridApi] = useState();\n  const [quickFilterText, setQuickFilterText] = useState('');\n  const externalFilterRef = useRef(null);\n\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n    let allColumnIds = gridApi.columnController.gridColumns.map(\n      (col) => col.colId\n    );\n    let currentMapping = assetTypeFieldMapping.find(\n      (mapping) => mapping.Asset_Name === selectedAssetType\n    );\n\n    let columnsToShow = currentMapping ? currentMapping.Fields : [];\n\n    if (!columnsToShow || columnsToShow.length === 0) {\n      gridApi.columnController.setColumnsVisible(allColumnIds, true);\n      return;\n    }\n\n    if (columnsToShow.length > 0) {\n      columnsToShow.push('actions', 'order_id');\n    }\n\n    gridApi.columnController.setColumnsVisible(allColumnIds, false);\n    gridApi.columnController.setColumnsVisible(columnsToShow, true);\n  }, [gridApi, assetTypeFieldMapping, selectedAssetType]);\n\n  useEffect(() => {\n    gridApi && gridApi.onFilterChanged();\n  }, [selectedAssetType]);\n\n  useEffect(() => {\n    setLoading(false);\n  }, [rowData]);\n\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n    loading ? gridApi.showLoadingOverlay() : gridApi.hideOverlay();\n  }, [loading]);\n\n  const getNewData = async (gridApi) => {\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    // Fetching data\n    fetchGet(DATAURLS.ORDERS.url, appContext.token)\n      .then((response) => {\n        setRowData(response.Orders);\n        let tempAPI = JSON.parse(JSON.stringify(response.Orders));\n        setRowDataAPI(tempAPI);\n      })\n      .catch((err) => {\n        throw err;\n      });\n\n    // Fetching column definition\n    fetchGet(DATAURLS.COLUMNDEFINITIONS.url, appContext.token)\n      .then((response) => {\n        setColumnDefs(response.columnDefinitions);\n      })\n      .catch((err) => {\n        throw err;\n      });\n\n    // Fetching Asset Types\n    // fetchGet(DATAURLS.ASSETTYPES.url, appContext.token)\n    //   .then((response) => {\n    //     setAssetTypeFieldMapping(response.assetTypes);\n    //     let assetNames = response.assetTypes.map(\n    //       (assetType) => assetType.Asset_Name\n    //     );\n    //     setAssetTypes(assetNames);\n    //     gridApi.hideOverlay();\n    //   })\n    //   .catch((err) => {\n    //     throw err;\n    //   });\n\n    // Fetching Status Codes\n    // fetchGet(DATAURLS.STATUS_CODES.url, appContext.token)\n    //   .then((response) => {\n    //     setStatusCodes(\n    //       response.status_codes.sort((a, b) =>\n    //         a.status_id < b.status_id ? -1 : 1\n    //       )\n    //     );\n    //     let statusNames = response.status_codes.map(\n    //       (status) => status.status_name\n    //     );\n    //     setStatusNames(statusNames);\n    //     gridApi.hideOverlay();\n    //   })\n    //   .catch((err) => {\n    //     throw err;\n    //   });\n\n    highlightUnsavedRows();\n  };\n\n  const validateRow = (params) => {\n    let allRows = [];\n    params.api.forEachNode((node) => allRows.push(node.data));\n\n    let duplicateNumberRows = [];\n\n    duplicateNumberRows = allRows.filter(\n      (row) => row.asset_number && row.asset_number === params.data.asset_number\n    );\n\n    return duplicateNumberRows.length <= 1;\n  };\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n    getNewData(params.api);\n  };\n\n  const onRowSelected = (params) => {\n    setEnableBulkUpdates(gridApi.getSelectedRows().length > 0);\n  };\n\n  const onRowDataChanged = (params) => {\n    highlightUnsavedRows(params);\n  };\n\n  const onRowEditingStarted = (params) => {\n    gridApi.refreshCells({\n      rowNodes: [params.node],\n      columns: [params.columnApi.columnController.allDisplayedColumns[0]],\n      force: true,\n    });\n  };\n\n  const onRowEditingStopped = (params) => {\n    gridApi.stopEditing();\n\n    if (validateRow(params) === true) {\n      let currentRowFromAPI = rowDataAPI.find(\n        (row) => row.order_id === params.data.order_id\n      );\n\n      if (\n        currentRowFromAPI &&\n        JSON.stringify(params.data) === JSON.stringify(currentRowFromAPI)\n      ) {\n        return;\n      }\n\n      // if (params.data.order_id) {\n      //   handleUpdate(params);\n      //   return;\n      // }\n\n      if (currentRowFromAPI) {\n        handleUpdate(params);\n        return;\n      }\n      handleSave(params);\n    } else {\n      setSnackBarOpen(true);\n      setSnackBarMessage('Cannot insert duplicate asset number');\n      setSnackBarType('error');\n      params.api.startEditingCell({\n        rowIndex: params.rowIndex,\n        colKey: 'asset_number',\n      });\n    }\n  };\n\n  const onCellEditingStopped = (params) => {\n    if (params.colDef.field !== 'asset_type') {\n      return;\n    }\n\n    if (params.colDef.field === 'asset_type') {\n      let currentAssetType = assetTypeFieldMapping.find(\n        (asset) => asset.Asset_Name === params.data.asset_type\n      );\n      if (!params.data.sample_co2 || params.oldValue !== params.newValue) {\n        params.data.sample_co2 = currentAssetType.sampleco2;\n      }\n      if (!params.data.sample_weight || params.oldValue !== params.newValue) {\n        params.data.sample_weight = currentAssetType.sample_weight;\n      }\n    }\n  };\n\n  const handleAddNew = async (data) => {\n    if (gridApi) {\n      gridApi.paginationGoToFirstPage();\n    }\n    let newRow = [{ ...data }];\n    if (selectedAssetType !== 'All') {\n      newRow.map((row) => (row.asset_type = selectedAssetType));\n    }\n\n    setRowData((prev) => [...newRow, ...prev]);\n    setTimeout(() => {\n      gridApi.startEditingCell({\n        rowIndex: 0,\n        colKey: 'quantity',\n        keyPress: '1',\n      });\n    }, 150);\n  };\n\n  const handleUpdate = (params) => {\n    Object.keys(params.data).forEach((key) => {\n      if (!params.data[key]) {\n        params.data[key] = null;\n        params.data['deleted'] = false;\n      }\n    });\n\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    params.data.last_updated_at = new Date().toISOString();\n    params.data.last_updated_by = appContext.currentUser.user_email;\n\n    if (params.data.status === 'Sold' && !params.data.date_nor) {\n      params.data.date_nor = new Date().toISOString().slice(0, 10);\n    }\n\n    if (params.data.status !== 'Sold' && params.data.date_nor) {\n      params.data.date_nor = null;\n    }\n    fetchPut(\n      DATAURLS.ORDERS.url,\n      {\n        data: params.data,\n        matchBy: 'order_id',\n      },\n      appContext.token\n    )\n      .then((response) => {\n        if (response.ok) {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('success');\n          gridApi.redrawRows({ rowNodes: [params.node] });\n        } else {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('error');\n          gridApi.startEditingCell({\n            rowIndex: params.rowIndex,\n            colKey: 'quantity',\n          });\n        }\n        setLoading(false);\n        gridApi.hideOverlay();\n        setTimeout(() => {\n          highlightUnsavedRows(params);\n        }, 600);\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  const handleBulkUpdate = (params) => {\n    setBulkUpdateOpen(true);\n  };\n\n  const handleSave = (params) => {\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    if (params.data.status === 'Sold' && !params.data.date_nor) {\n      params.data.date_nor = new Date().toISOString().slice(0, 10);\n    }\n\n    if (params.data.status !== 'Sold' && params.data.date_nor) {\n      params.data.date_nor = null;\n    }\n\n    params.data.created_by = appContext.currentUser.user_email;\n\n    fetchPost(DATAURLS.ORDERS.url, { data: params.data }, appContext.token)\n      .then((response) => {\n        if (response.ok) {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('success');\n          params.data.order_id = response.rows[0].order_id;\n          gridApi.redrawRows({ rowNodes: [params.node] });\n        } else {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('error');\n          gridApi.startEditingCell({\n            rowIndex: params.rowIndex,\n            colKey: 'asset_type',\n          });\n        }\n        setLoading(false);\n        gridApi.hideOverlay();\n        params.node.setSelected(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        throw err;\n      });\n  };\n\n  const handleExport = () => {\n    generateExcel(gridApi, 'Orders.xlsx');\n  };\n\n  const handleCopy = () => {\n    if (gridApi) {\n      gridApi.paginationGoToFirstPage();\n    }\n    let selectedRows = gridApi.getSelectedRows();\n    if (selectedRows.length === 0) {\n      return;\n    }\n    let updatedRows = JSON.parse(JSON.stringify(selectedRows.slice()));\n\n    updatedRows.map((row) => {\n      delete row['order_id'];\n    });\n    setRowData((prev) => [...updatedRows, ...prev]);\n  };\n\n  const handleDelete = async (props) => {\n    gridApi.showLoadingOverlay();\n    setLoading(true);\n    if (!props.data.order_id) {\n      let rowDataCopy = [...rowData];\n      rowDataCopy.splice(props.node.rowIndex, 1);\n      setRowData(rowDataCopy);\n      return;\n    }\n\n    fetchDelete(\n      DATAURLS.ORDERS.url,\n      {\n        data: { order_id: props.data.order_id },\n        matchBy: 'order_id',\n      },\n      appContext.token\n    )\n      .then((res) => {\n        if (res.ok) {\n          let rowDataCopy = [...rowData];\n          rowDataCopy.splice(props.node.rowIndex, 1);\n          setRowData(rowDataCopy);\n          setLoading(false);\n        } else {\n          setLoading(false);\n          console.log('error', res);\n        }\n      })\n      .catch((err) => {\n        console.log('deletion failed', err);\n      });\n\n    gridApi.hideOverlay();\n  };\n\n  const handleOpen = () => {\n    setCustomDeleteDialog(true);\n    setCustomDialogTitle('Delete multiple');\n    setCustomDialogMessage('Are you sure that you want to delete these orders');\n  };\n\n  const handleBulkDelete = async (props) => {\n    let selectedRows = gridApi.getSelectedRows();\n    let selectedAssetIds = selectedRows.map((row) => {\n      return { order_id: row.order_id };\n    });\n\n    setLoading(true);\n\n    fetchDelete(\n      DATAURLS.ORDERS_MULTIPLE.url,\n      selectedAssetIds,\n      appContext.token\n    )\n      .then((res) => {\n        setLoading(false);\n        if (res.ok) {\n          gridApi.deselectAll();\n          getNewData(gridApi);\n        } else {\n          gridApi.deselectAll();\n          getNewData(gridApi);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log('bulk update err', err);\n        throw err;\n      });\n  };\n\n  const highlightUnsavedRows = (params) => {\n    if (!params || rowDataAPI.length === 0) {\n      return;\n    }\n    let missingRowNodes = params.api.rowModel.rowsToDisplay.filter((row) => {\n      if (!row.data.order_id) {\n        return row;\n      }\n    });\n\n    if (missingRowNodes.length > 0) {\n      missingRowNodes.map((node) => {\n        if (params.node !== node) {\n          node.setSelected(true);\n        }\n      });\n    }\n  };\n\n  const bgColorDecider = (params, rowDataAPI) => {\n    // use this function to change background color of rows based on data\n    // leaving it here for future use\n    return false;\n  };\n\n  const externalFilterChanged = (value) => {\n    setSelectedAssetType(value);\n  };\n\n  const isExternalFilterPresent = () => {\n    return externalFilterRef.current.children[1].value !== 'All';\n  };\n\n  const doesExternalFilterPass = (node) => {\n    return node.data.asset_type === externalFilterRef.current.children[1].value;\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.sectionHeader}>\n        Order Details{' '}\n        <Paper component='form' className={classes.textRoot}>\n          <InputBase\n            className={classes.input}\n            placeholder='Search Orders'\n            inputProps={{ 'aria-label': 'Search Orders' }}\n            value={quickFilterText}\n            onChange={(event) => {\n              event.stopPropagation();\n              setQuickFilterText(event.target.value);\n            }}\n          />\n          <IconButton\n            // type='submit'\n            className={classes.iconButton}\n            aria-label='search'\n          >\n            <SearchIcon />\n          </IconButton>\n        </Paper>\n        <div className={classes.actionArea}>\n          <Select\n            value={selectedAssetType}\n            className={classes.select}\n            ref={externalFilterRef}\n            onChange={(event) => {\n              externalFilterChanged(event.target.value);\n            }}\n          >\n            <MenuItem value='All'>All</MenuItem>\n            {assetTypes.map((type) => (\n              <MenuItem value={type}>{type}</MenuItem>\n            ))}\n          </Select>\n          <FontAwesomeIcon\n            icon={faTasks}\n            title='Bulk Update'\n            className={clsx(classes.actionIconDisabled, {\n              [classes.actionIcon]: enableBulkUpdates,\n            })}\n            onClick={() => enableBulkUpdates && handleBulkUpdate(gridApi)}\n          />\n\n          <FontAwesomeIcon\n            icon={faUpload}\n            title='Import'\n            className={classes.actionIcon}\n            onClick={() => setFileUploadOpen(true)}\n          />\n\n          <FontAwesomeIcon\n            icon={faDownload}\n            title='Export'\n            className={classes.actionIcon}\n            onClick={() => handleExport()}\n          />\n\n          <Divider orientation='vertical' flexItem />\n          <FontAwesomeIcon\n            icon={faPlus}\n            title='Add'\n            className={classes.actionIcon}\n            onClick={() => handleAddNew()}\n          />\n          <FontAwesomeIcon\n            icon={faTrash}\n            title='Delete'\n            className={clsx(classes.actionIconDisabled, {\n              [classes.actionIcon]: enableBulkUpdates,\n            })}\n            // onClick={() => enableBulkUpdates && handleBulkDelete()}\n            onClick={() => enableBulkUpdates && handleOpen()}\n          />\n          <FontAwesomeIcon\n            icon={faCopy}\n            title='Copy'\n            className={classes.actionIcon}\n            onClick={() => handleCopy()}\n          />\n        </div>\n      </div>\n      <div\n        className='ag-theme-balham'\n        style={{\n          width: '95%',\n          height: '80vh',\n          boxShadow: '0 1px 15px 1px rgba(69,65,78,.08)',\n        }}\n      >\n        <AgGridReact\n          rowData={rowData}\n          rowBuffer={500}\n          debounceVerticalScrollbar={true}\n          columnDefs={buildColumnDefinitions(columnDefs, assetTypes)}\n          frameworkComponents={frameworkComponents}\n          suppressDragLeaveHidesColumns={true}\n          onGridReady={onGridReady}\n          rowSelection='multiple'\n          onRowEditingStopped={onRowEditingStopped}\n          onCellEditingStopped={onCellEditingStopped}\n          onRowSelected={onRowSelected}\n          onRowDataChanged={onRowDataChanged}\n          onRowEditingStarted={onRowEditingStarted}\n          editType='fullRow'\n          getRowClass={(params) => bgColorDecider(params, rowDataAPI)}\n          overlayLoadingTemplate={overlayLoadingTemplate}\n          getNewData={getNewData}\n          handleDelete={handleDelete}\n          pagination={true}\n          paginationPageSize={pageSize}\n          suppressRowClickSelection={true}\n          alwaysShowVerticalScroll={true}\n          quickFilterText={quickFilterText}\n          // quickFilterText={selectedAssetType !== 'All' ? selectedAssetType : ''}\n          isExternalFilterPresent={isExternalFilterPresent}\n          doesExternalFilterPass={doesExternalFilterPass}\n          floatingFilter={true}\n          // stopEditingWhenGridLosesFocus={true}\n        ></AgGridReact>\n\n        <CustomDropdown\n          options={[25, 50, 100, 500]}\n          title={'Page Size'}\n          value={pageSize}\n          onChange={(value) => {\n            setPageSize(value);\n            gridApi.paginationSetPageSize(value);\n          }}\n        />\n        <Snackbar\n          open={snackBarOpen}\n          autoHideDuration={3000}\n          onClose={() =>\n            setSnackBarOpen(snackBarType === 'error' ? true : false)\n          }\n        >\n          <MuiAlert\n            elevation={6}\n            variant='filled'\n            onClose={() => setSnackBarOpen(false)}\n            severity={snackBarType}\n          >\n            {snackBarMessage}\n          </MuiAlert>\n        </Snackbar>\n      </div>\n      <BulkUpdateDialog\n        open={bulkUpdateOpen}\n        title='bulk update'\n        columnDefs={columnDefs}\n        parentGridApi={gridApi}\n        getNewData={getNewData}\n        setOpen={setBulkUpdateOpen}\n        assetTypes={assetTypes}\n        statusNames={statusNames}\n      />\n      <FileUploadDialog\n        open={fileUploadOpen}\n        allAssets={rowData}\n        title='file upload'\n        setOpen={setFileUploadOpen}\n        assetTypes={assetTypes}\n        palletNumbers={palletNumbers}\n        statusNames={statusNames}\n        getNewData={getNewData}\n        parentGridApi={gridApi}\n      />\n      <CustomDialog\n        open={customDeleteDialog}\n        title={customDialogTitle}\n        message={customDialogMessage}\n        handleAgree={() => {\n          handleBulkDelete();\n          setCustomDeleteDialog(false);\n        }}\n        handleDisagree={() => setCustomDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\nexport default Orders;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Login.js",["146","147","148","149","150","151"],"import { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Grid, Hidden, Button } from '@material-ui/core';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport EmailIcon from '@material-ui/icons/Email';\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport React, { useState, useContext, useEffect } from 'react';\n\nimport clsx from 'clsx';\n\nimport { Router, Redirect, useLocation, useHistory } from 'react-router-dom';\n\nimport AppContext from '../context/AppContext';\nimport WorkChatLog from '../images/undraw_Work_chat.svg';\nimport { DATAURLS } from '../utilities/constants';\nimport { fetchPost, fetchPut } from '../utilities/dataCalls';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'flex-start',\n      background: '#f5f7fd',\n      height: '100vh',\n    },\n    header: {\n      display: 'flex',\n      alignItems: 'center',\n      backgroundColor: '#fff !important',\n      height: '7%',\n      width: '100%',\n    },\n    mainContent: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '90%',\n      width: '100%',\n    },\n    textContainer: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'flex-start',\n      width: '100%',\n      paddingLeft: '25px',\n    },\n    loginContainer1HeaderText: {\n      fontFamily: 'Poppins',\n      fontSize: '1.5rem',\n      fontWeight: 'bold',\n    },\n    loginContainer1Text: {\n      fontFamily: 'Poppins',\n      fontSize: '1.5rem',\n      color: '#3B5096 !important',\n      fontWeight: 'bold',\n      marginLeft: '5px',\n    },\n    inputContainer: {\n      // display: 'flex',\n      // flexDirection: 'row',\n      // flexWrap: 'wrap',\n      height: '60%',\n      width: '60%',\n      boxShadow: '0 4px 16px rgba(0,0,0,.15)',\n      backgroundColor: '#fff',\n      [theme.breakpoints.down('sm')]: {\n        width: '90%',\n      },\n    },\n    inputContainer1: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      height: '100%',\n      // background: '#3B5096',\n      backgroundImage: 'url(../images/undraw_Work_chat.svg)',\n    },\n    inputContainer2: {\n      height: '100%',\n    },\n    welcomeText: {\n      color: 'white',\n      fontFamily: 'Poppins',\n      fontWeight: 'bold',\n    },\n    inputContainer3: {\n      height: '100%',\n      display: 'flex',\n      alignItems: 'flex-start',\n      // border: '1px solid',\n    },\n    inputContainer4: {\n      marginTop: '15px',\n      // height: '15%',\n      height: '10%',\n      textAlign: 'center',\n    },\n    inputContainer5: {\n      height: '80%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    inputText: {\n      fontFamily: 'Poppins',\n      color: '#3B5096',\n    },\n    inputValue: {\n      fontSize: '1em',\n    },\n    test: {\n      border: '1px solid red',\n    },\n    textField: {\n      width: '70%',\n      marginBottom: '15px',\n      background: '#f5f7fd',\n    },\n    loginButton: {\n      // marginTop: '15px',\n      width: '150px',\n      height: '40px',\n      borderRadius: '10px',\n      background: '#3B5096',\n      color: 'white',\n      '&:hover': {\n        background: '#3B5096',\n        opacity: 0.8,\n      },\n      '&:disabled': {\n        background: '#3B5096',\n        opacity: 0.5,\n      },\n    },\n    icon: {\n      color: '#c8cacf',\n    },\n    buttonText: {\n      display: 'flex',\n      alignItems: 'center',\n      color: 'white',\n      fontFamily: 'Poppins',\n      fontWeight: 'bold',\n      fontSize: '1rem',\n    },\n    buttonProgress: { marginLeft: '15px' },\n    errorTextContainer: {\n      height: '40px',\n      width: '100%',\n      marginTop: '10px',\n      textAlign: 'center',\n      color: 'red',\n    },\n    textControl: { marginTop: '10px' },\n    dialogRoot: {\n      paddingBottom: '0px !important',\n    },\n    dialogActions: {\n      paddingRight: '20px',\n      marginBottom: '10px',\n    },\n    image: {\n      width: '100%',\n      height: '100%',\n      // maxWidth: '75%',\n    },\n  })\n);\n\nconst Login = () => {\n  const classes = useStyles();\n\n  const [useremail, setUseremail] = useState('demo@aravindh.me');\n  const [pwd, setPwd] = useState('hello123');\n  const [showPwd, setShowPwd] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [confirmation, setConfirmation] = useState(false);\n  const [response, setResponse] = useState({});\n  const [newPassword, setNewPassword] = useState('');\n  const [passwordError, setPasswordError] = useState(false);\n  const [passwordDuplicate, setPasswordDuplicate] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [invalidEmail, setInvalidEmail] = useState(false);\n\n  const appContext = useContext(AppContext);\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    localStorage.removeItem('token');\n    appContext.setIsUserLoggedIn(false);\n    appContext.setToken(null);\n    appContext.setCurrentUser({});\n  }, []);\n\n  const handleLogin = () => {\n    setLoading(true);\n    setErrorMessage('');\n    setError(false);\n    fetchPost(DATAURLS.LOGIN.url, { user_email: useremail, user_password: pwd })\n      .then((response) => {\n        if (response.ok) {\n          setLoading(false);\n          setResponse(response);\n          if (response.force_reset) {\n            setConfirmation(true);\n          } else {\n            localStorage.setItem('token', response.token);\n            appContext.setIsUserLoggedIn(true);\n            appContext.setToken(response.token);\n            appContext.setCurrentUser({\n              user_name: response.user_name,\n              user_email: useremail,\n              user_password: pwd,\n              user_role: response.user_role,\n            });\n            setRedirect(true);\n          }\n        } else {\n          appContext.setIsUserLoggedIn(false);\n          appContext.setToken(null);\n          appContext.setCurrentUser({});\n          setLoading(false);\n          setRedirect(false);\n          setError(true);\n          setErrorMessage(response.message);\n        }\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  const handlePasswordChange = () => {\n    let data = {\n      user_id: response.user_id,\n      user_password: newPassword,\n      force_reset: false,\n    };\n\n    fetchPut(\n      DATAURLS.USERS.url,\n      {\n        matchBy: 'user_id',\n        data: data,\n      },\n      response.token\n    )\n      .then((res) => {\n        setSuccess(true);\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  const handleOk = () => {\n    localStorage.setItem('token', response.token);\n\n    appContext.setIsUserLoggedIn(true);\n    appContext.setToken(response.token);\n    appContext.setCurrentUser({\n      user_name: response.user_name,\n      user_email: useremail,\n      user_password: pwd,\n      user_role: response.user_role,\n    });\n    setConfirmation(false);\n    setRedirect(true);\n  };\n\n  return (\n    <div>\n      {redirect && <Redirect to='/orders' />}\n      {!redirect && (\n        <div className={classes.root}>\n          <div className={classes.header}>\n            <div className={classes.textContainer}>\n              <span className={classes.loginContainer1HeaderText}>Dunder</span>\n              <span className={classes.loginContainer1Text}>Mifflin</span>\n            </div>\n          </div>\n          <div className={classes.mainContent}>\n            {/* <div className={classes.inputContainer}> */}\n            <Grid container direction='row' className={classes.inputContainer}>\n              <Hidden mdDown>\n                <Grid\n                  item\n                  lg={5}\n                  md={5}\n                  xs={false}\n                  className={classes.inputContainer1}\n                >\n                  <div className={classes.inputContainer4}></div>\n                  <div className={classes.inputContainer5}>\n                    <img\n                      src={WorkChatLog}\n                      className={classes.image}\n                      alt='login-image-work-chat'\n                    />\n                  </div>\n                </Grid>\n              </Hidden>\n              <Grid\n                container\n                lg={7}\n                md={12}\n                xs={12}\n                className={classes.inputContainer2}\n                direction='row'\n                justify='center'\n                alignItems='space-around'\n              >\n                <Grid\n                  container\n                  lg={11}\n                  className={classes.inputContainer3}\n                  justify='center'\n                >\n                  <Grid\n                    container\n                    lg={12}\n                    justify='center'\n                    className={classes.inputContainer4}\n                  >\n                    <div>\n                      <h2 className={classes.inputText}>Welcome</h2>\n                      {/* <h4 className={classes.inputText}>\n                        For access, reach out to an administrator\n                      </h4> */}\n                    </div>\n                  </Grid>\n                  <Grid\n                    container\n                    lg={12}\n                    justify='center'\n                    alignItems='center'\n                    className={classes.inputContainer5}\n                  >\n                    <Grid\n                      container\n                      lg={12}\n                      justify='center'\n                      alignItems='center'\n                      className={classes.inputContainer5}\n                    >\n                      <Grid container lg={12} justify='center'>\n                        <FormControl\n                          className={clsx(classes.margin, classes.textField)}\n                          variant='outlined'\n                          required\n                        >\n                          <OutlinedInput\n                            id='outlined-adornment-email'\n                            type={'text'}\n                            error={invalidEmail}\n                            value={useremail}\n                            placeholder='E-mail'\n                            className={classes.inputValue}\n                            onChange={(event) =>\n                              setUseremail(event.target.value)\n                            }\n                            onBlur={(event) => {\n                              setInvalidEmail(!useremail.match(/\\S+@\\S+\\.\\S+/));\n                            }}\n                            startAdornment={\n                              <InputAdornment position='start'>\n                                {<EmailIcon className={classes.icon} />}\n                              </InputAdornment>\n                            }\n                            // labelWidth={70}\n                          />\n                        </FormControl>\n                      </Grid>\n                      <Grid container lg={12} justify='center'>\n                        <FormControl\n                          className={clsx(classes.margin, classes.textField)}\n                          variant='outlined'\n                          required\n                        >\n                          {/* <InputLabel htmlFor='outlined-adornment-password'>\n                        Password\n                      </InputLabel> */}\n                          <OutlinedInput\n                            id='outlined-adornment-password'\n                            type={showPwd ? 'text' : 'password'}\n                            value={pwd}\n                            placeholder='password'\n                            onChange={(event) => setPwd(event.target.value)}\n                            startAdornment={\n                              <InputAdornment position='start'>\n                                {<VpnKeyIcon className={classes.icon} />}\n                              </InputAdornment>\n                            }\n                            endAdornment={\n                              <InputAdornment position='end'>\n                                <IconButton\n                                  aria-label='toggle password visibility'\n                                  onClick={() => setShowPwd((prev) => !prev)}\n                                  onMouseDown={(event) =>\n                                    event.preventDefault()\n                                  }\n                                  edge='end'\n                                >\n                                  {showPwd ? <Visibility /> : <VisibilityOff />}\n                                </IconButton>\n                              </InputAdornment>\n                            }\n                            // labelWidth={90}\n                          />\n                        </FormControl>\n                      </Grid>\n                      <Grid container lg={12} justify='center'>\n                        <Button\n                          variant='contained'\n                          color='primary'\n                          disabled={\n                            !(\n                              pwd &&\n                              pwd.length > 0 &&\n                              useremail &&\n                              useremail.length > 0\n                            ) ||\n                            loading ||\n                            invalidEmail\n                          }\n                          className={classes.loginButton}\n                          onClick={() => handleLogin()}\n                        >\n                          <div className={classes.buttonText}>\n                            Login\n                            {loading && (\n                              <CircularProgress\n                                size='1rem'\n                                className={classes.buttonProgress}\n                              />\n                            )}\n                          </div>\n                        </Button>\n\n                        <div className={classes.errorTextContainer}>\n                          <div>{errorMessage}</div>\n                        </div>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                {/* </Grid> */}\n              </Grid>\n            </Grid>\n            {/* </div> */}\n          </div>\n        </div>\n      )}\n      <Dialog\n        open={confirmation}\n        onClose={() => setConfirmation(false)}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Change Password</DialogTitle>\n        <DialogContent className={classes.dialogRoot}>\n          {success && (\n            <DialogContentText>\n              Password has been changed successfully\n            </DialogContentText>\n          )}\n          {!success && (\n            <DialogContentText id='alert-dialog-description'>\n              Since this is your first login, we request you to change the\n              password\n              <FormControl className={classes.textControl} required>\n                <TextField\n                  //   autoComplete='fname'\n                  error={passwordError || passwordDuplicate}\n                  value={newPassword}\n                  onChange={(event) => {\n                    setNewPassword(event.target.value);\n                    setPasswordError(!event.target.value.length > 0);\n                    setPasswordDuplicate(event.target.value === pwd);\n                  }}\n                  variant='outlined'\n                  required\n                  fullWidth\n                  id='new_password'\n                  label='New Password'\n                  helperText={\n                    passwordError\n                      ? 'A new password is required'\n                      : passwordDuplicate\n                      ? 'New password cannot be the same as old password'\n                      : ''\n                  }\n                />\n              </FormControl>\n            </DialogContentText>\n          )}\n        </DialogContent>\n        <DialogActions className={classes.dialogActions}>\n          {success && (\n            <Button\n              variant='contained'\n              onClick={() => {\n                handleOk();\n              }}\n              color='primary'\n              autoFocus\n            >\n              Ok!\n            </Button>\n          )}\n          {!success && (\n            <Button\n              variant='contained'\n              onClick={() => {\n                handlePasswordChange();\n              }}\n              color='primary'\n              autoFocus\n              disabled={newPassword.length === 0 || passwordDuplicate}\n            >\n              Update\n              {loading && (\n                <CircularProgress\n                  size='1rem'\n                  className={classes.buttonProgress}\n                />\n              )}\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Profile.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/Users.js",["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faDownload,\n  faUpload,\n  faTasks,\n  faPlus,\n  faTrash,\n  faCopy,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport Paper from '@material-ui/core/Paper';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport { makeStyles, createStyles, useTheme } from '@material-ui/core/styles';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Divider from '@material-ui/core/Divider';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { useState, useEffect, useContext } from 'react';\n\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\n\nimport ActionCellRenderer from '../components/ActionCellRenderer';\nimport BulkUpdateDialog from '../components/BulkUpdateDialog';\nimport CustomDropdown from '../components/CustomDropdown';\nimport AddNewUser from '../components/AddNewUser';\nimport FileUploadDialog from '../components/FileUploadDialog';\nimport AppContext from '../context/AppContext';\nimport { AppTheme } from '../utilities/Theme';\nimport { DATAURLS } from '../utilities/constants';\nimport {\n  fetchPut,\n  fetchPost,\n  fetchGet,\n  fetchDelete,\n} from '../utilities/dataCalls';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '95vw',\n      height: '93vh',\n      marginLeft: '4vw',\n      // marginTop: '80px',\n    },\n\n    buttonBox: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: '50%',\n    },\n    buttonArea: {\n      display: 'flex',\n    },\n    select: {\n      color: 'white',\n    },\n    sectionHeader: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      // color: '#212121',\n      color: 'white',\n      fontWeight: 'bold',\n      fontSize: '1rem',\n      // marginTop: '10px',\n      width: '95%',\n      height: '40px',\n      boxShadow: '0px 0px 5px #222',\n      paddingLeft: '10px',\n      background:\n        'linear-gradient(90deg, rgba(39,105,85,1) 55%, rgba(39,96,0,1) 100%)',\n    },\n    actionArea: {\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-evenly',\n      width: '30%',\n    },\n    actionIcon: {\n      fontSize: '1rem',\n      cursor: 'pointer',\n      color: theme.primary,\n    },\n    textRoot: {\n      padding: '2px 4px',\n      display: 'flex',\n      alignItems: 'center',\n      width: 400,\n      height: '30px',\n    },\n    input: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    iconButton: {\n      padding: 10,\n    },\n  })\n);\n\nconst frameworkComponents = {\n  //   CustomCellEditor: CustomCellEditor,\n  ActionCellRenderer: ActionCellRenderer,\n};\n\nconst Users = () => {\n  const theme = useTheme(AppTheme);\n  const classes = useStyles(theme);\n  const appContext = useContext(AppContext);\n  const overlayLoadingTemplate =\n    '<span class=\"ag-overlay-loading-center\">Please wait while update in progress</span>';\n\n  const buildColumnDefinitions = (columnDefs) => {\n    return columnDefs.map((columnDef, index) => {\n      let columnDefinition = {\n        headerName: columnDef.header_name,\n        // cellRenderer: columnDef.id === 0 ? 'ActionCellRenderer' : false,\n        // cellRendererParams: {\n        //   onRowEditingStopped: (params) => onRowEditingStopped(params),\n        //   colKey: 'user_name',\n        //   deleteConfirmation: deleteConfirmation,\n        //   //   allAssets: allAssets,\n        // },\n        // headerCheckboxSelection: index === 0 ? true : false,\n        checkboxSelection: index === 0 ? true : false,\n        field: columnDef.field,\n        editable: columnDef.editable,\n        // filter: index !== 0 ? 'agTextColumnFilter' : 'none',\n        sortable: true,\n        resizable: true,\n        hide: columnDef.hide,\n        // floatingFilter: true,\n        width: index === 0 ? 20 : 'auto',\n      };\n      return columnDefinition;\n    });\n  };\n\n  const [loading, setLoading] = useState(true);\n  const [pageSize, setPageSize] = useState(25);\n  const [snackBarOpen, setSnackBarOpen] = useState(false);\n  const [snackBarMessage, setSnackBarMessage] = useState('');\n  const [snackBarType, setSnackBarType] = useState('success');\n  const [rowData, setRowData] = useState([]);\n  const [rowDataAPI, setRowDataAPI] = useState([]);\n  const [allUserRoles, setUserRoles] = useState([]);\n  const [columnDefs, setColumnDefs] = useState([]);\n  const [assetTypeFieldMapping, setAssetTypeFieldMapping] = useState([]);\n  const [selectedAssetType, setSelectedAssetType] = useState('All');\n  const [enableDelete, setEnableDelete] = useState(false);\n  const [gridApi, setGridApi] = useState();\n  const [quickFilterText, setQuickFilterText] = useState('');\n\n  const [addNewDialog, setAddNewDialog] = useState(false);\n\n  useEffect(() => {\n    if (!gridApi) {\n      return;\n    }\n    let allColumnIds = gridApi.columnController.gridColumns.map(\n      (col) => col.colId\n    );\n    let currentMapping = assetTypeFieldMapping.find(\n      (mapping) => mapping.Asset_Name === selectedAssetType\n    );\n\n    let columnsToShow = currentMapping ? currentMapping.Fields : [];\n    console.log('assettypes', assetTypeFieldMapping, columnsToShow);\n    if (!columnsToShow || columnsToShow.length === 0) {\n      gridApi.columnController.setColumnsVisible(allColumnIds, true);\n      return;\n    }\n\n    if (columnsToShow.length > 0) {\n      columnsToShow.push('actions', 'pallet_id');\n    }\n\n    gridApi.columnController.setColumnsVisible(allColumnIds, false);\n    gridApi.columnController.setColumnsVisible(columnsToShow, true);\n  }, [gridApi, assetTypeFieldMapping, selectedAssetType]);\n\n  const getNewData = async (gridApi) => {\n    console.log('gridapi', gridApi);\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    // Fetching all users\n    fetchGet(DATAURLS.USERS.url, appContext.token)\n      .then((response) => {\n        setRowData(response.users);\n        setLoading(false);\n      })\n      .catch((err) => {\n        throw err;\n      });\n\n    // Fetching all user roles\n    fetchGet(DATAURLS.USER_ROLES.url, appContext.token)\n      .then((response) => {\n        setUserRoles(response.userRoles);\n      })\n      .catch((err) => {\n        throw err;\n      });\n\n    // Fetching column definition\n    fetchGet(DATAURLS.USERS_COLUMNDEFINITIONS.url, appContext.token)\n      .then((response) => {\n        setColumnDefs(response.columnDefinitions);\n        setLoading(false);\n      })\n      .catch((err) => {\n        throw err;\n      });\n\n    highlightUnsavedRows();\n    gridApi.sizeColumnsToFit();\n  };\n\n  const deleteConfirmation = (data, allAssets) => {\n    console.log('deleteconfirmation,data', data, allAssets, rowData);\n    const existingAssets = allAssets.filter(\n      (asset) => asset.pallet_id === data.pallet_id\n    );\n\n    if (existingAssets.length > 0) {\n      setSnackBarOpen(true);\n      setSnackBarMessage(\n        `Cannot delete ${data.pallet_id}. There are assets existing with this pallet id`\n      );\n      setSnackBarType('error');\n\n      return false;\n    }\n    return true;\n  };\n\n  const onGridReady = (params) => {\n    setGridApi(params.api);\n    getNewData(params.api);\n  };\n\n  const onModelUpdated = (params) => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const onRowSelected = (params) => {\n    setEnableDelete(gridApi.getSelectedRows().length > 0);\n  };\n\n  const onRowDataChanged = (params) => {\n    highlightUnsavedRows(params);\n  };\n\n  const onRowEditingStarted = (params) => {\n    console.log('on row editing started', params);\n    gridApi.refreshCells({\n      rowNodes: [params.node],\n      columns: [params.columnApi.columnController.allDisplayedColumns[0]],\n      force: true,\n    });\n  };\n\n  const onRowEditingStopped = (params) => {\n    console.log('rowediting stopped');\n    let currentRowFromAPI = rowDataAPI.find(\n      (row) => row.pallet_id === params.data.pallet_id\n    );\n\n    if (\n      currentRowFromAPI &&\n      JSON.stringify(params.data) === JSON.stringify(currentRowFromAPI)\n    ) {\n      console.log('no update done');\n      return;\n    }\n\n    if (params.data.pallet_id) {\n      handleUpdate(params);\n      return;\n    }\n    handleSave(params);\n  };\n\n  const handleAddNew = async (data) => {\n    setAddNewDialog(true);\n    // console.log('add new', gridApi);\n    // let newRow = [{ ...data }];\n    // setRowData((prev) => [...newRow, ...prev]);\n  };\n\n  const handleUpdate = (params) => {\n    console.log('rowediting, update', params);\n    Object.keys(params.data).forEach((key) => {\n      if (!params.data[key]) {\n        params.data[key] = null;\n      }\n    });\n\n    console.log('rowediting update data', params.data);\n\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    fetchPut(\n      DATAURLS.PALLETS.url,\n      {\n        data: params.data,\n        matchBy: 'pallet_id',\n      },\n      appContext.token\n    )\n      .then((response) => {\n        console.log('response', response);\n        if (response.ok) {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('success');\n          gridApi.redrawRows({ rowNodes: [params.node] });\n        } else {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('error');\n          gridApi.startEditingCell({\n            rowIndex: params.rowIndex,\n            colKey: 'quantity',\n          });\n        }\n        setLoading(false);\n        gridApi.hideOverlay();\n        setTimeout(() => {\n          highlightUnsavedRows(params);\n        }, 600);\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  const handleSave = (params) => {\n    console.log('handlesave, params', params);\n    setLoading(true);\n    gridApi.showLoadingOverlay();\n\n    fetchPost(DATAURLS.PALLETS.url, { data: params.data }, appContext.token)\n      .then((response) => {\n        if (response.ok) {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('success');\n          params.data.pallet_id = response.rows[0].pallet_id;\n          gridApi.redrawRows({ rowNodes: [params.node] });\n        } else {\n          setSnackBarOpen(true);\n          setSnackBarMessage(response.message);\n          setSnackBarType('error');\n          gridApi.startEditingCell({\n            rowIndex: params.rowIndex,\n            colKey: 'pallet_type',\n          });\n        }\n        setLoading(false);\n        gridApi.hideOverlay();\n        params.node.setSelected(false);\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(rowData);\n        throw err;\n      });\n  };\n\n  const handleDelete = (params) => {\n    console.log('handle delete Asset Type', params);\n\n    fetchDelete(DATAURLS.PALLETS.url, { data: params.data }, appContext.token)\n      .then((res) => {\n        if (res.ok) {\n          getNewData(gridApi);\n        } else {\n          setSnackBarOpen(true);\n          setSnackBarMessage(res.message);\n          setSnackBarType('error');\n        }\n      })\n      .catch((err) => {\n        console.log('error deleting record');\n        throw err;\n      });\n  };\n\n  const highlightUnsavedRows = (params) => {\n    console.log('highlightUnsavedRows', params);\n    if (!params || rowDataAPI.length === 0) {\n      return;\n    }\n    let missingRowNodes = params.api.rowModel.rowsToDisplay.filter((row) => {\n      if (!row.data.pallet_id) {\n        return row;\n      }\n    });\n\n    console.log('highlightUnsavedRows', missingRowNodes);\n    if (missingRowNodes.length > 0) {\n      missingRowNodes.map((node) => {\n        if (params.node !== node) {\n          node.setSelected(true);\n        }\n      });\n    }\n  };\n\n  const bgColorDecider = (params, rowDataAPI) => {\n    return false;\n  };\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.sectionHeader}>\n        Users\n        <Paper component='form' className={classes.textRoot}>\n          <InputBase\n            className={classes.input}\n            placeholder='Search Users'\n            inputProps={{ 'aria-label': 'Search Users' }}\n            value={quickFilterText}\n            onChange={(event) => setQuickFilterText(event.target.value)}\n          />\n          <IconButton\n            // type='submit'\n            className={classes.iconButton}\n            aria-label='search'\n          >\n            <SearchIcon />\n          </IconButton>\n        </Paper>\n        <div className={classes.actionArea}>\n          <FontAwesomeIcon\n            icon={faPlus}\n            title='Add'\n            className={classes.actionIcon}\n            onClick={() => handleAddNew()}\n          />\n          <FontAwesomeIcon\n            icon={faTrash}\n            title='Delete'\n            className={classes.actionIconDisabled}\n            onClick={() => handleDelete()}\n          />\n        </div>\n      </div>\n      <div\n        className='ag-theme-balham'\n        style={{\n          width: '95%',\n          height: '80vh',\n          boxShadow: '0 1px 15px 1px rgba(69,65,78,.08)',\n        }}\n      >\n        <AgGridReact\n          rowData={rowData}\n          rowBuffer={500}\n          debounceVerticalScrollbar={true}\n          columnDefs={buildColumnDefinitions(columnDefs)}\n          frameworkComponents={frameworkComponents}\n          suppressDragLeaveHidesColumns={true}\n          onGridReady={onGridReady}\n          rowSelection='multiple'\n          onRowEditingStopped={onRowEditingStopped}\n          onRowSelected={onRowSelected}\n          onRowDataChanged={onRowDataChanged}\n          onRowEditingStarted={onRowEditingStarted}\n          editType='fullRow'\n          getRowClass={(params) => bgColorDecider(params, rowDataAPI)}\n          overlayLoadingTemplate={overlayLoadingTemplate}\n          getNewData={getNewData}\n          handleDelete={handleDelete}\n          pagination={true}\n          paginationPageSize={pageSize}\n          suppressRowClickSelection={true}\n          alwaysShowVerticalScroll={true}\n          quickFilterText={quickFilterText}\n          onModelUpdated={onModelUpdated}\n        ></AgGridReact>\n\n        <CustomDropdown\n          options={[25, 50, 100, 500]}\n          title={'Page Size'}\n          value={pageSize}\n          onChange={(value) => {\n            setPageSize(value);\n            gridApi.paginationSetPageSize(value);\n          }}\n        />\n        <Snackbar\n          open={snackBarOpen}\n          autoHideDuration={3000}\n          onClose={() =>\n            setSnackBarOpen(snackBarType === 'error' ? true : false)\n          }\n        >\n          <MuiAlert\n            elevation={6}\n            variant='filled'\n            onClose={() => setSnackBarOpen(false)}\n            severity={snackBarType}\n          >\n            {snackBarMessage}\n          </MuiAlert>\n        </Snackbar>\n      </div>\n      <AddNewUser\n        open={addNewDialog}\n        setOpen={setAddNewDialog}\n        title='Add New User'\n        allUsers={rowData}\n        allUserRoles={allUserRoles}\n        getNewData={getNewData}\n        parentGridApi={gridApi}\n      />\n    </div>\n  );\n};\n\nexport default Users;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/Theme.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/authenticate.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/BulkUpdateDialog.js",["170"],"import Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nimport { AgGridReact } from 'ag-grid-react';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport React, { useState, useContext } from 'react';\nimport NumericEditor from '../components/NumericEditor';\nimport CurrencyEditor from '../components/CurrencyEditor';\n\nimport AppContext from '../context/AppContext';\nimport { DATAURLS } from '../utilities/constants';\nimport { fetchPut } from '../utilities/dataCalls';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    dialogTitle: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      height: '40px',\n      background: 'linear-gradient(to right, #eef2f3, #8e9eab)',\n      boxShadow: '1px 1px 3px #8e9eab',\n    },\n    dialogRoot: {\n      width: '650px !important',\n      height: '500px',\n      //   display: 'flex',\n      //   flexDirection: 'column',\n    },\n    dialogTitleText: {\n      fontFamily: \"'Poppins'\",\n      fontWeight: 700,\n      textTransform: 'uppercase',\n      fontSize: '0.85rem',\n    },\n    dialogContent: {\n      marginTop: '10px',\n    },\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      width: '50%',\n      marginBottom: '15px',\n      marginRight: '15px',\n    },\n    button: {\n      marginLeft: '15px',\n    },\n    buttonProgress: { marginLeft: '5px' },\n  })\n);\n\nconst BulkUpdateDialog = ({\n  open,\n  setOpen,\n  parentGridApi,\n  getNewData,\n  columnDefs,\n  title,\n  assetTypes,\n  statusNames,\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [enableSubmission, setEnableSubmission] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [gridApi, setGridApi] = useState(null);\n  const appContext = useContext(AppContext);\n\n  const frameworkComponents = {\n    //   CustomCellEditor: CustomCellEditor,\n    NumericEditor,\n    CurrencyEditor,\n  };\n\n  const buildColumnDefinitions = (columnDefs) => {\n    return [\n      {\n        headerName: 'Column',\n        field: 'header_name',\n        // checkboxSelection: true,\n\n        resizable: true,\n      },\n      { headerName: 'field', field: 'field', hide: true, resizable: true },\n      {\n        headerName: 'Value',\n        field: 'value',\n        editable: true,\n        cellEditorSelector: (params) => {\n          if (params.data.field === 'asset_type') {\n            return {\n              component: 'agSelectCellEditor',\n              params: {\n                values: assetTypes,\n              },\n            };\n          }\n          if (params.data.field === 'status') {\n            return {\n              component: 'agSelectCellEditor',\n              params: {\n                values: statusNames,\n              },\n            };\n          }\n          if (params.data.type === 'numericColumn') {\n            return { component: 'NumericEditor' };\n          }\n          if (params.data.type === 'currencyColumn') {\n            return { component: 'CurrencyEditor' };\n          }\n        },\n      },\n    ];\n  };\n\n  const onGridReady = (params) => {\n    params.api.sizeColumnsToFit();\n    setGridApi(params.api);\n    setEnableSubmission(false);\n  };\n\n  const onCellEditingStarted = (params) => {\n    setEnableSubmission(false);\n  };\n  const onCellEditingStopped = (params) => {\n    let checkValue = columnDefs.filter((column) => column.value);\n    setEnableSubmission(checkValue.length > 0 ? true : false);\n  };\n\n  const handleSubmit = (rows) => {\n    let selectedRowNodes = rows.filter((node) => node.data.value);\n    let selectedRows = selectedRowNodes.map((node) => node.data);\n\n    setLoading(true);\n    let updateObject = {};\n    selectedRows.forEach((row) => {\n      updateObject[row.field] = row.value;\n    });\n\n    let selectedData = [];\n\n    selectedData = parentGridApi.getSelectedRows().map((row) => {\n      return { order_id: row.order_id, ...updateObject };\n    });\n\n    fetchPut(DATAURLS.ORDERS_MULTIPLE.url, selectedData, appContext.token)\n      .then((res) => {\n        if (res.ok) {\n          setSuccess(true);\n          setLoading(false);\n        } else {\n          setSuccess(false);\n          setError(true);\n          setLoading(false);\n        }\n      })\n      .catch((err) => {\n        console.log('bulk response err', err);\n        setLoading(false);\n        throw err;\n      });\n  };\n\n  return (\n    <Dialog\n      open={open}\n      //   onClose={getNewData(p)}\n      aria-labelledby='alert-dialog-title'\n      aria-describedby='alert-dialog-description'\n      maxWidth='md'\n      className='dialogRoot'\n      classes={{ paper: classes.dialogRoot }}\n    >\n      <DialogTitle id='alert-dialog-title' className={classes.dialogTitle}>\n        <div className={classes.dialogTitleText}>{title}</div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        {success && <div>Update Successful</div>}\n        {!success && (\n          <div>\n            <DialogContentText id='alert-dialog-description'>\n              Select columns to update{' '}\n              {parentGridApi && (\n                <span>\n                  - {parentGridApi.getSelectedRows().length} rows selected\n                </span>\n              )}\n            </DialogContentText>\n            <div\n              className='ag-theme-alpine'\n              style={{\n                width: '600px',\n                height: '300px',\n                boxShadow: '0 1px 15px 1px rgba(69,65,78,.08)',\n              }}\n            >\n              <AgGridReact\n                rowData={columnDefs.filter((column) => column.bulk_update)}\n                columnDefs={buildColumnDefinitions(columnDefs)}\n                frameworkComponents={frameworkComponents}\n                onCellEditingStopped={onCellEditingStopped}\n                onCellEditingStarted={onCellEditingStarted}\n                onGridReady={onGridReady}\n                editType='fullRow'\n                stopEditingWhenGridLosesFocus={true}\n              ></AgGridReact>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n      <DialogActions>\n        {success && (\n          <div className={classes.buttonContainer}>\n            <Button\n              variant='contained'\n              color='primary'\n              className={classes.button}\n              onClick={() => {\n                getNewData(parentGridApi);\n                parentGridApi.deselectAll();\n                setSuccess(false);\n                setOpen(false);\n              }}\n            >\n              Ok!\n            </Button>\n          </div>\n        )}\n        {!success && (\n          <div className={classes.buttonContainer}>\n            <Button\n              variant='contained'\n              onClick={() => setOpen(false)}\n              color='secondary'\n              disabled={loading}\n              className={classes.button}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant='contained'\n              onClick={() => handleSubmit(gridApi.rowModel.rowsToDisplay)}\n              color='primary'\n              disabled={loading || !enableSubmission}\n              className={classes.button}\n            >\n              Update\n              {loading && (\n                <CircularProgress\n                  size='1rem'\n                  className={classes.buttonProgress}\n                />\n              )}\n            </Button>\n          </div>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default BulkUpdateDialog;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/ActionCellRenderer.js",["171","172","173","174","175","176"],"import Button from '@material-ui/core/Button';\nimport DoneIcon from '@material-ui/icons/Done';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport React, { useState, useEffect } from 'react';\n\nimport CustomDialog from './CustomDialog';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100% !important',\n      width: '100%',\n      color: 'red',\n    },\n    icon: {\n      height: '15px',\n    },\n    // editIcon: {\n    //   color: theme.primary,\n    // },\n    deleteIcon: {\n      color: 'red',\n      height: '20px',\n    },\n  })\n);\nconst ActionCellRenderer = (props) => {\n  // console.log('action cell ', props, props.api.getEditingCells());\n  const classes = useStyles();\n  const [editMode, setEditMode] = useState(false);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    setEditMode(\n      props.api.getEditingCells().length > 0\n        ? props.api.getEditingCells()[0].rowIndex === props.node.rowIndex\n        : false\n    );\n  }, [props]);\n\n  const handleEdit = () => {\n    setEditMode(true);\n    props.api.startEditingCell({\n      rowIndex: props.node.rowIndex,\n      colKey: props.colDef.cellRendererParams.colKey\n        ? props.colDef.cellRendererParams.colKey\n        : 'quantity',\n    });\n  };\n\n  const handleDone = () => {\n    setEditMode(false);\n    props.api.stopEditing();\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    console.log('handleopen', props.colDef.cellRendererParams);\n    if (\n      props.colDef.cellRendererParams &&\n      props.colDef.cellRendererParams.deleteConfirmation\n    ) {\n      let proceedWithDeletion = props.colDef.cellRendererParams.deleteConfirmation(\n        props.data,\n        props.colDef.cellRendererParams.allAssets\n      );\n      if (proceedWithDeletion) {\n        setOpen(true);\n      } else {\n        setOpen(false);\n      }\n      return;\n    }\n\n    setOpen(true);\n  };\n  const handleDelete = () => {\n    props.agGridReact.props.handleDelete(props);\n  };\n\n  return (\n    <div className={classes.root}>\n      {!editMode && (\n        <EditIcon\n          className={[classes.icon, classes.editIcon]}\n          color='primary'\n          onClick={() => handleEdit()}\n        ></EditIcon>\n      )}\n      {editMode && (\n        <DoneIcon\n          className={[classes.icon]}\n          color='primary'\n          onClick={() => handleDone()}\n        ></DoneIcon>\n      )}\n      <DeleteIcon className={classes.icon} onClick={() => handleOpen()} />\n\n      <CustomDialog\n        open={open}\n        title='Delete Order'\n        message={`Are you sure you want to delete ${\n          props.colDef.cellRendererParams.colKey\n            ? props.node.data[props.colDef.cellRendererParams.colKey]\n            : 'this order'\n        }`}\n        handleDisagree={() => handleClose()}\n        handleAgree={() => handleDelete()}\n      />\n    </div>\n  );\n};\n\nexport default ActionCellRenderer;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CustomDropdown.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/generateExcel.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/constants.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/FileUploadDialog.js",["177","178","179","180","181","182","183"],"import {\n  faTimes,\n  faFileUpload,\n  faCheckCircle,\n  faExclamationCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport clsx from 'clsx';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport XLSX from 'xlsx';\nimport AppContext from '../context/AppContext';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { fetchPut, fetchPost, fetchGet } from '../utilities/dataCalls';\nimport React, { useState, useRef, useEffect, useContext } from 'react';\nimport PacmanLoader from 'react-spinners/PacmanLoader';\nimport GridLoader from 'react-spinners/GridLoader';\n\nimport {\n  DATAURLS,\n  FILE_UPLOAD_ROW_COUNT_ERROR,\n  FILE_UPLOAD_ROW_COUNT_ERROR_MESSAGE,\n  FILE_UPLOAD_order_id_MISSING_MESSAGE,\n  FILE_UPLOAD_EMPTY_FILE_MESSAGE,\n} from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    dialogRoot: {\n      width: '600px',\n      height: '450px',\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    dialogTitle: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      height: '40px',\n      background: 'linear-gradient(to right, #eef2f3, #8e9eab)',\n      boxShadow: '1px 1px 3px #8e9eab',\n    },\n    dialogTitleText: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      fontFamily: \"'Poppins'\",\n      fontWeight: 700,\n      textTransform: 'uppercase',\n      fontSize: '0.85rem',\n    },\n    dialogContent: {\n      //   marginTop: '10px',\n    },\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      width: '50%',\n      marginBottom: '15px',\n      marginRight: '15px',\n    },\n    button: {\n      marginLeft: '15px',\n    },\n    buttonProgress: { marginLeft: '5px' },\n    actionIcon: {\n      fontSize: '1.25rem',\n      cursor: 'pointer',\n    },\n    stepContent: {\n      width: '100%',\n    },\n    steps: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      //   paddingLeft: '20px',\n    },\n    stepsText: {\n      marginTop: '15px',\n      fontFamily: 'Poppins',\n      fontSize: '20px',\n    },\n    stepsTextError: {\n      marginTop: '15px',\n      fontFamily: 'Poppins',\n      fontSize: '20px',\n      color: 'red',\n      textAlign: 'center',\n    },\n    stepsSubText: {\n      marginTop: '5px',\n      fontFamily: 'Poppins',\n      fontSize: '12px',\n    },\n    uploadArea: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      color: '#ababab',\n      '&:hover': {\n        color: '#3B5096',\n        cursor: 'pointer',\n      },\n    },\n    uploadIcon: {\n      fontSize: '80px',\n      // color: '#cdcdcd',\n      // '&:hover': {\n      //   color: '#3B5096',\n      //   cursor: 'pointer',\n      // },\n    },\n    successIcon: {\n      color: '#3B5096',\n      marginBottom: '15px',\n    },\n    errorIcon: {\n      color: '#eb8034',\n      marginBottom: '15px',\n    },\n    successArea: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n    },\n    spinnerArea: {\n      marginBottom: '10px',\n    },\n    animatedItem: {\n      animation: `$myEffect 300ms ${theme.transitions.easing.easeInOut}`,\n    },\n    '@keyframes myEffect': {\n      '0%': {\n        opacity: 0,\n      },\n      '100%': {\n        opacity: 1,\n      },\n    },\n  })\n);\n\nconst handleSubmit = () => {\n  console.log('handle submit');\n};\n\nconst FileUploadDialog = ({\n  open,\n  title,\n  allAssets,\n  setOpen,\n  assetTypes,\n  palletNumbers,\n  statusNames,\n  getNewData,\n  parentGridApi,\n}) => {\n  console.log('Allassets', allAssets, assetTypes, statusNames);\n  const classes = useStyles();\n  const fileUploader = useRef(null);\n  const appContext = useContext(AppContext);\n  const [loading, setLoading] = useState(false);\n  const [enableSubmission, setEnableSubmission] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [fileUploadSuccess, setFileUploadSuccess] = useState(false);\n  const [fileUploadError, setFileUploadError] = useState(false);\n  const [fileUploadErrorMessage, setFileUploadErrorMessage] = useState('');\n  const [data, setData] = useState([]);\n  const [cols, setCols] = useState([]);\n  const [steps, setSteps] = useState([\n    'Select a file',\n    'Update Records',\n    'Insert Records',\n  ]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [assetIDRows, setAssetIDRows] = useState([]);\n  const [nonAssetIDRows, setNonAssetIDRows] = useState([]);\n\n  useEffect(() => {\n    handleReset();\n  }, [open]);\n\n  useEffect(() => {\n    if (!success) {\n      return;\n    }\n    let allAssetIDs = allAssets.map((asset) => asset.order_id);\n    console.log('allasset ids , data', allAssetIDs, data);\n    setAssetIDRows(\n      data.filter((row) => allAssetIDs.indexOf('' + row.order_id) !== -1)\n    );\n    setNonAssetIDRows(\n      data.filter((row) => allAssetIDs.indexOf('' + row.order_id) === -1)\n    );\n  }, [success]);\n\n  const handleReset = () => {\n    setLoading(false);\n    setSuccess(false);\n    setError(false);\n    setData([]);\n    setCols([]);\n    setCurrentStep(0);\n    setAssetIDRows([]);\n    setNonAssetIDRows([]);\n    setFileUploadSuccess(false);\n    setFileUploadErrorMessage('');\n    setFileUploadError(false);\n    if (fileUploader.current) {\n      fileUploader.current.value = null;\n    }\n  };\n\n  const handleNext = () => {\n    setSuccess(false);\n    setError(false);\n    setCurrentStep((prev) => prev + 1);\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep((prev) => prev - 1);\n  };\n\n  const handleUpdate = async () => {\n    setLoading(true);\n    try {\n      let updateSuccess = await fetchPut(\n        DATAURLS.ORDERS_MULTIPLE.url,\n        assetIDRows,\n        appContext.token\n      );\n      setLoading(false);\n      if (updateSuccess.ok) {\n        setSuccess(true);\n      } else {\n        setError(true);\n        setLoading(false);\n        setFileUploadErrorMessage(updateSuccess.message.split('-')[1]);\n      }\n    } catch (err) {\n      console.log('update error', err);\n      setLoading(false);\n      setError(false);\n      setFileUploadErrorMessage(err.message);\n      throw err;\n    }\n  };\n\n  const handleInsert = async () => {\n    setLoading(true);\n    let dataWithoutAssetIds = nonAssetIDRows.map((asset) => {\n      let tempObject = { ...asset };\n      if (!tempObject.order_id) {\n        tempObject.order_id = null;\n      }\n      Object.keys(tempObject).forEach((key) => {\n        if (!tempObject[key]) {\n          delete tempObject[key];\n        }\n      });\n\n      return tempObject;\n    });\n\n    try {\n      let insertSuccess = await fetchPost(\n        DATAURLS.ORDERS_MULTIPLE.url,\n        dataWithoutAssetIds,\n        appContext.token\n      );\n      setLoading(false);\n      if (insertSuccess.ok) {\n        setSuccess(true);\n      } else {\n        setError(true);\n        setLoading(false);\n        setFileUploadErrorMessage(insertSuccess.message.split('-')[1]);\n      }\n    } catch (err) {\n      setLoading(false);\n      setError(false);\n      setFileUploadErrorMessage(err.message);\n      throw err;\n    }\n  };\n\n  const handleFileUpload = (event) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) {\n      return;\n    }\n    const file = files[0];\n\n    const reader = new FileReader();\n    const rABS = !!reader.readAsBinaryString;\n    setLoading(true);\n    try {\n      reader.onload = (e) => {\n        /* Parse data */\n        const bstr = e.target.result;\n        // const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' });\n        const wb = XLSX.read(bstr, { type: 'binary' });\n        // const wb = XLSX.readFile(file.path);\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_json(ws, { defval: null });\n        /* Update state */\n        setData(data);\n        setCols(make_cols(ws['!ref']));\n        console.log('resetting load');\n\n        setLoading(false);\n        console.log('columns', data);\n\n        // checking all file upload errors here\n        if (data.length === 0 || !data) {\n          console.log('columns empty file', data);\n          setSuccess(true);\n          setFileUploadError(true);\n          setFileUploadErrorMessage(FILE_UPLOAD_EMPTY_FILE_MESSAGE);\n          return;\n        }\n\n        if (Object.keys(data[0]).indexOf('order_id') === -1) {\n          setSuccess(true);\n          setFileUploadError(true);\n          setFileUploadErrorMessage(FILE_UPLOAD_order_id_MISSING_MESSAGE);\n          return;\n        }\n\n        if (data.length > FILE_UPLOAD_ROW_COUNT_ERROR) {\n          setSuccess(true);\n          setFileUploadError(true);\n          setFileUploadErrorMessage(FILE_UPLOAD_ROW_COUNT_ERROR_MESSAGE);\n          return;\n        }\n        // Checking for new asset types in uploaded file\n        // let newAssetType = data.find(\n        //   (asset) => assetTypes.indexOf(asset.asset_type) === -1\n        // );\n\n        // if (newAssetType) {\n        //   setSuccess(true);\n        //   setFileUploadError(true);\n        //   setFileUploadErrorMessage(\n        //     `Invalid asset type - '${newAssetType.asset_type}' found in one or more rows`\n        //   );\n        //   return;\n        // }\n\n        // Checking for new status values in uploaded file\n        // let newStatus = data.find(\n        //   (asset) => asset.status && statusNames.indexOf(asset.status) === -1\n        // );\n        // if (newStatus) {\n        //   setSuccess(true);\n        //   setFileUploadError(true);\n        //   setFileUploadErrorMessage(\n        //     `Invalid status - '${newStatus.status}' found in one or more rows`\n        //   );\n        //   return;\n        // }\n\n        // Checking for new pallet number in uploaded file\n        // let newPalletNumber = data.find(\n        //   (asset) =>\n        //     asset.pallet_number &&\n        //     palletNumbers.indexOf(asset.pallet_number) === -1\n        // );\n\n        // console.log('pallet numbers', data, palletNumbers, newPalletNumber);\n        // if (newPalletNumber) {\n        //   setSuccess(true);\n        //   setFileUploadError(true);\n        //   setFileUploadErrorMessage(\n        //     `Invalid pallet number - '${newPalletNumber.pallet_number}' found in one or more rows`\n        //   );\n        //   return;\n        // }\n\n        // // Checking for empty quanity in uploaded file\n        // let emptyQuantity = data.find((asset) => !asset.quantity);\n        // if (emptyQuantity) {\n        //   setSuccess(true);\n        //   setFileUploadError(true);\n        //   setFileUploadErrorMessage(\n        //     `Invalid quantity - one or more rows with no quantity values`\n        //   );\n        //   return;\n        // }\n\n        setFileUploadSuccess(true);\n        setSuccess(true);\n        // this.setState({ data: data, cols: make_cols(ws['!ref']) });\n      };\n      if (rABS) reader.readAsBinaryString(file);\n      else reader.readAsArrayBuffer(file);\n    } catch (err) {\n      setError(true);\n      throw err;\n    }\n\n    // fileUploader.current.value = '';\n  };\n\n  const make_cols = (refstr) => {\n    let o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n    for (var i = 0; i < C; ++i)\n      o[i] = { name: XLSX.utils.encode_col(i), key: i };\n    return o;\n  };\n\n  const stepContent = (stepNumber) => {\n    switch (stepNumber) {\n      case 0: {\n        return (\n          <div className={classes.steps}>\n            <input\n              type='file'\n              ref={fileUploader}\n              style={{ display: 'none' }}\n              accept={'.csv, .xls, .xlsx'}\n              onChange={(e) => handleFileUpload(e)}\n            />\n            {!loading && !success && (\n              <div\n                onClick={(e) => fileUploader.current.click()}\n                className={classes.uploadArea}\n              >\n                <FontAwesomeIcon\n                  icon={faFileUpload}\n                  className={classes.uploadIcon}\n                />\n                <div className={classes.stepsText}>Select a file</div>\n                <div className={classes.stepsSubText}>\n                  (.csv, .xls, .xlsx. Also, limit to 1000 rows)\n                </div>\n              </div>\n            )}\n            {loading && (\n              <FontAwesomeIcon\n                icon={faSpinner}\n                spin\n                className={clsx(classes.uploadArea, classes.uploadIcon)}\n              />\n            )}\n            {!loading && success && (\n              <div className={classes.successArea}>\n                {!fileUploadError && (\n                  <FontAwesomeIcon\n                    icon={faCheckCircle}\n                    className={clsx(\n                      classes.uploadArea,\n                      classes.uploadIcon,\n                      classes.successIcon,\n                      classes.animatedItem\n                    )}\n                  />\n                )}\n                {fileUploadError && (\n                  <div className={classes.uploadArea}>\n                    <FontAwesomeIcon\n                      icon={faExclamationCircle}\n                      className={clsx(\n                        classes.uploadIcon,\n                        classes.errorIcon,\n                        classes.animatedItem\n                      )}\n                    />\n                    <div\n                      className={classes.uploadArea}\n                      onClick={(e) => {\n                        fileUploader.current.click();\n                        setTimeout(() => {\n                          handleReset();\n                        }, 500);\n                      }}\n                    >\n                      Click here to try again\n                    </div>\n                  </div>\n                )}\n                {!fileUploadError && (\n                  <div className={classes.stepsText}>\n                    {data.length} rows found. Let's start reviewing\n                  </div>\n                )}\n                {fileUploadError && (\n                  <div className={classes.stepsTextError}>\n                    {fileUploadErrorMessage}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        );\n      }\n      case 1: {\n        return (\n          <div className={classes.successArea}>\n            {!loading && !success && (\n              <div>\n                <div className={classes.stepsText}>\n                  {assetIDRows.length} records with a matching Asset ID\n                </div>\n              </div>\n            )}\n            {loading && <PacmanLoader color='#3B5096' size={50} />}\n            {!loading && success && (\n              <div>\n                <div className={classes.stepsText}>Update Successful</div>\n              </div>\n            )}\n            {!loading && error && (\n              <div>\n                <div className={classes.stepsTextError}>\n                  {fileUploadErrorMessage}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }\n      case 2: {\n        return (\n          <div className={classes.successArea}>\n            {!loading && !success && (\n              <div>\n                <div className={classes.stepsText}>\n                  {nonAssetIDRows.length} new records found\n                </div>\n              </div>\n            )}\n            {loading && <GridLoader color='#3B5096' size={30} />}\n            {!loading && success && (\n              <div>\n                <div className={classes.stepsText}>Insertion Successful</div>\n              </div>\n            )}\n            {!loading && error && (\n              <div>\n                <div className={classes.stepsTextError}>\n                  {fileUploadErrorMessage}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }\n      default: {\n        <div>Successful</div>;\n      }\n    }\n  };\n\n  return (\n    <Dialog\n      open={open}\n      //   onClose={getNewData(p)}\n      aria-labelledby='alert-dialog-title'\n      aria-describedby='alert-dialog-description'\n      maxWidth='md'\n      //   className={classes.dialogRoot}\n    >\n      <div className={classes.dialogRoot}>\n        <DialogTitle id='alert-dialog-title' className={classes.dialogTitle}>\n          <div className={classes.dialogTitleText}>\n            <div>{title}</div>\n          </div>\n          <FontAwesomeIcon\n            icon={faTimes}\n            className={classes.actionIcon}\n            onClick={() => setOpen(false)}\n          />\n        </DialogTitle>\n\n        <DialogContent className={classes.dialogContent}>\n          <DialogContentText id='alert-dialog-description'>\n            <Stepper\n              activeStep={currentStep}\n              alternativeLabel\n              // style={{ width: '700px', height: '400px' }}\n            >\n              {steps.map((label) => (\n                <Step key={label}>\n                  <StepLabel>{label}</StepLabel>\n                </Step>\n              ))}\n            </Stepper>\n          </DialogContentText>\n          <div className={classes.stepContent}>{stepContent(currentStep)}</div>\n        </DialogContent>\n        <DialogActions>\n          <div className={classes.buttonContainer}>\n            <Button\n              variant='contained'\n              onClick={() => handlePrevious()}\n              color='secondary'\n              disabled={currentStep === 0}\n              className={classes.button}\n            >\n              Back\n            </Button>\n\n            {currentStep !== 2 && (\n              <Button\n                variant='contained'\n                onClick={() => handleNext()}\n                color='primary'\n                disabled={\n                  !assetIDRows.length === 0 ||\n                  !fileUploadSuccess ||\n                  (assetIDRows.length > 0 &&\n                    (loading || fileUploadError || !success))\n                }\n                className={classes.button}\n              >\n                Next\n                {/* {loading && (\n                <CircularProgress\n                  size='1rem'\n                  className={classes.buttonProgress}\n                /> \n              )}*/}\n              </Button>\n            )}\n\n            {currentStep === 1 && !success && assetIDRows.length > 0 && (\n              <Button\n                variant='contained'\n                onClick={() => handleUpdate()}\n                color='primary'\n                disabled={loading}\n                className={classes.button}\n              >\n                Update\n                {loading && (\n                  <CircularProgress\n                    size='1rem'\n                    className={classes.buttonProgress}\n                  />\n                )}\n              </Button>\n            )}\n            {currentStep === 2 && !success && nonAssetIDRows.length > 0 && (\n              <Button\n                variant='contained'\n                onClick={() => handleInsert()}\n                color='primary'\n                disabled={loading}\n                className={classes.button}\n              >\n                Insert\n                {loading && (\n                  <CircularProgress\n                    size='1rem'\n                    className={classes.buttonProgress}\n                  />\n                )}\n              </Button>\n            )}\n            {currentStep === 2 &&\n              (nonAssetIDRows.length === 0 ||\n                (nonAssetIDRows.length > 0 && success)) && (\n                <Button\n                  variant='contained'\n                  onClick={() => {\n                    getNewData(parentGridApi);\n                    setOpen(false);\n                  }}\n                  color='primary'\n                  disabled={loading}\n                  className={classes.button}\n                >\n                  Finish\n                  {loading && (\n                    <CircularProgress\n                      size='1rem'\n                      className={classes.buttonProgress}\n                    />\n                  )}\n                </Button>\n              )}\n          </div>\n        </DialogActions>\n      </div>\n    </Dialog>\n  );\n};\n\nexport default FileUploadDialog;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/utilities/dataCalls.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/ColumnCellRenderer.js",["184","185","186","187","188","189","190","191","192","193","194","195","196","197"],"import { faColumns } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AppContext from '../context/AppContext';\n\nimport DualListBox from 'react-dual-listbox';\n\nimport React, { useState, useEffect, useContext } from 'react';\n\nimport CustomDialog from './CustomDialog';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport { DATAURLS } from '../utilities/constants';\nimport {\n  fetchPut,\n  fetchPost,\n  fetchGet,\n  fetchDelete,\n} from '../utilities/dataCalls';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100% !important',\n      width: '100%',\n      color: 'red',\n    },\n    icon: {\n      color: '#3B5096',\n      height: '15px',\n      cursor: 'pointer',\n    },\n    dialogRoot: {\n      width: '650px',\n      height: '500px',\n      //   display: 'flex',\n      //   flexDirection: 'column',\n    },\n    dialogTitle: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      height: '40px',\n      background: 'linear-gradient(to right, #eef2f3, #8e9eab)',\n      boxShadow: '1px 1px 3px #8e9eab',\n    },\n    dialogTitleText: {\n      fontFamily: \"'Poppins'\",\n      fontWeight: 700,\n      textTransform: 'uppercase',\n      fontSize: '0.85rem',\n    },\n    dialogContent: {\n      marginTop: '10px',\n    },\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      width: '50%',\n      marginBottom: '15px',\n      marginRight: '15px',\n    },\n    button: {\n      marginLeft: '15px',\n    },\n    buttonProgress: { marginLeft: '5px' },\n    listRoot: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n  })\n);\nconst ColumnCellRenderer = (props) => {\n  console.log('column cell ', props);\n  const classes = useStyles();\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [enableSubmission, setEnableSubmission] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [selected, setSelected] = useState([]);\n  const [allColumnsOptions, setAllColumnsOptions] = useState([]);\n  const [selectedColumnOptions, setSelectedColumnOptions] = useState([]);\n  const [fields, setFields] = useState([]);\n  const appContext = useContext(AppContext);\n\n  const handleToggle = (value) => {\n    console.log('handle toggle', value);\n    if (fields.indexOf(value) === -1) {\n      setFields((prev) => [...prev, value]);\n      console.log('setting fields', fields);\n      return;\n    }\n    setFields((prev) => prev.filter((field) => field !== value));\n  };\n\n  useEffect(() => {\n    setEnableSubmission(\n      JSON.stringify(props.data.Fields.sort()) !== JSON.stringify(fields.sort())\n    );\n  }, [fields]);\n\n  useEffect(() => {\n    setAllColumnsOptions(\n      props.colDef.cellRendererParams.allColumns.map((col) => ({\n        field: col.field,\n        header_name: col.header_name,\n      }))\n    );\n\n    let tempFields = JSON.parse(JSON.stringify(props.data.Fields));\n    setFields(tempFields);\n  }, [props]);\n\n  const handleUpdate = () => {\n    let data = {\n      Asset_Name: props.data.Asset_Name,\n      Asset_Id: props.data.Asset_Id,\n      Fields: fields,\n    };\n    console.log('rowediting, update', data);\n    Object.keys(data).forEach((key) => {\n      if (!data[key]) {\n        data[key] = null;\n      }\n    });\n\n    console.log('rowediting update data', data);\n    setLoading(true);\n    delete data.columnNames;\n\n    fetchPut(\n      DATAURLS.ASSETTYPES.url,\n      {\n        data: data,\n        matchBy: 'Asset_Id',\n      },\n      appContext.token\n    )\n      .then((response) => {\n        console.log('response', response);\n        if (response.ok) {\n          setSuccess(true);\n          setLoading(false);\n        } else {\n          setSuccess(false);\n          setLoading(false);\n          setError(true);\n        }\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  return (\n    <div className={classes.root}>\n      <FontAwesomeIcon\n        icon={faColumns}\n        className={classes.icon}\n        onClick={() => {\n          if (props.data.Asset_Name.length > 0) {\n            setOpen(true);\n          }\n        }}\n      />\n      <Dialog\n        open={open}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        maxWidth='md'\n        classes={{ paper: classes.dialogRoot }}\n      >\n        <DialogTitle id='alert-dialog-title' className={classes.dialogTitle}>\n          <div\n            className={classes.dialogTitleText}\n          >{`Columns for ${props.data.Asset_Name}`}</div>\n        </DialogTitle>\n        <DialogContent className={classes.dialogContent}>\n          {success && <div>Update Successful</div>}\n          {!success && (\n            <div>\n              <DialogContentText>\n                {fields.length} / {allColumnsOptions.length} selected\n              </DialogContentText>\n              <List className={classes.listRoot}>\n                {allColumnsOptions.map((column) => {\n                  const labelId = `checkbox-list-label-${column.field}`;\n\n                  return (\n                    <ListItem\n                      key={column.field}\n                      role={undefined}\n                      dense\n                      button\n                      onClick={() => handleToggle(column.field)}\n                    >\n                      <ListItemIcon>\n                        <Checkbox\n                          edge='start'\n                          checked={\n                            fields.length > 0\n                              ? fields.indexOf(column.field) !== -1\n                              : true\n                          }\n                          tabIndex={-1}\n                          disableRipple\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </ListItemIcon>\n                      <ListItemText id={labelId} primary={column.header_name} />\n                    </ListItem>\n                  );\n                })}\n              </List>\n            </div>\n          )}\n        </DialogContent>\n        <DialogActions>\n          {success && (\n            <div className={classes.buttonContainer}>\n              <Button\n                variant='contained'\n                color='primary'\n                className={classes.button}\n                onClick={() => {\n                  setSuccess(false);\n                  setOpen(false);\n                }}\n              >\n                Ok!\n              </Button>\n            </div>\n          )}\n          {!success && (\n            <div className={classes.buttonContainer}>\n              <Button\n                variant='contained'\n                onClick={() => {\n                  setFields(props.data.Fields);\n                  setOpen(false);\n                }}\n                color='secondary'\n                // disabled={loading}\n                className={classes.button}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant='contained'\n                onClick={() => handleUpdate()}\n                color='primary'\n                disabled={loading || !enableSubmission}\n                className={classes.button}\n              >\n                Update\n                {loading && (\n                  <CircularProgress\n                    size='1rem'\n                    className={classes.buttonProgress}\n                  />\n                )}\n              </Button>\n            </div>\n          )}\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default ColumnCellRenderer;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/NumericEditor.js",["198"],"import React, { Component } from 'react';\n\nconst KEY_BACKSPACE = 8;\nconst KEY_DELETE = 46;\nconst KEY_F2 = 113;\nconst KEY_ENTER = 13;\nconst KEY_TAB = 9;\n\nexport default class NumericEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.cancelBeforeStart =\n      this.props.charPress && '1234567890'.indexOf(this.props.charPress) < 0;\n\n    this.state = this.createInitialState(props);\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  createInitialState(props) {\n    let startValue;\n    let highlightAllOnFocus = true;\n\n    if (props.keyPress === KEY_BACKSPACE || props.keyPress === KEY_DELETE) {\n      // if backspace or delete pressed, we clear the cell\n      startValue = '';\n    } else if (props.charPress) {\n      // if a letter was pressed, we start with the letter\n      startValue = props.charPress;\n      highlightAllOnFocus = false;\n    } else {\n      // otherwise we start with the current value\n      startValue = props.value;\n      if (props.keyPress === KEY_F2) {\n        highlightAllOnFocus = false;\n      }\n    }\n\n    return {\n      value: startValue,\n      // highlightAllOnFocus,\n      highlightAllOnFocus: false,\n    };\n  }\n\n  componentDidMount() {\n    this.refs.input.addEventListener('keydown', this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    this.refs.input.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  afterGuiAttached() {\n    // get ref from React component\n    const eInput = this.refs.input;\n    // eInput.focus();\n    if (this.state.highlightAllOnFocus) {\n      // eInput.select();\n\n      this.setState({\n        highlightAllOnFocus: false,\n      });\n    } else {\n      // when we started editing, we want the carot at the end, not the start.\n      // this comes into play in two scenarios: a) when user hits F2 and b)\n      // when user hits a printable character, then on IE (and only IE) the carot\n      // was placed after the first character, thus 'apply' would end up as 'pplea'\n      const length = eInput.value ? eInput.value.length : 0;\n      if (length > 0) {\n        eInput.setSelectionRange(length, length);\n      }\n    }\n  }\n\n  getValue() {\n    return this.state.value;\n  }\n\n  isCancelBeforeStart() {\n    return this.cancelBeforeStart;\n  }\n\n  // will reject the number if it greater than 1,000,000\n  // not very practical, but demonstrates the method.\n  isCancelAfterEnd() {\n    return this.state.value > 1000000;\n  }\n\n  onKeyDown(event) {\n    if (this.isLeftOrRight(event) || this.deleteOrBackspace(event)) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (\n      !this.finishedEditingPressed(event) &&\n      !this.isKeyPressedNumeric(event)\n    ) {\n      if (event.preventDefault) event.preventDefault();\n    }\n  }\n\n  isLeftOrRight(event) {\n    return [37, 39].indexOf(event.keyCode) > -1;\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  getCharCodeFromEvent(event) {\n    event = event || window.event;\n    return typeof event.which === 'undefined' ? event.keyCode : event.which;\n  }\n\n  isCharNumeric(charStr) {\n    return !!/\\d/.test(charStr);\n  }\n\n  isKeyPressedNumeric(event) {\n    const charCode = this.getCharCodeFromEvent(event);\n    const charStr = event.key ? event.key : String.fromCharCode(charCode);\n    return this.isCharNumeric(charStr);\n  }\n\n  render() {\n    return (\n      <input\n        ref='input'\n        value={this.state.value}\n        onChange={this.handleChange}\n        style={{ width: '100%', height: '100%', border: 'none' }}\n      />\n    );\n  }\n\n  deleteOrBackspace(event) {\n    return [KEY_DELETE, KEY_BACKSPACE].indexOf(event.keyCode) > -1;\n  }\n\n  finishedEditingPressed(event) {\n    const charCode = this.getCharCodeFromEvent(event);\n    return charCode === KEY_ENTER || charCode === KEY_TAB;\n  }\n}\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/DialogEditor.js",["199","200"],"import React, { Component, createRef } from 'react';\nimport CustomDialog from '../components/CustomDialog';\nimport { Autocomplete } from '@material-ui/lab';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class DialogEditor extends Component {\n  constructor(props) {\n    super(props);\n    console.log('dialog editor', props);\n    let inputRef = createRef();\n    this.state = this.createInitialState(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  createInitialState(props) {\n    return {\n      value: props.value,\n    };\n  }\n\n  getValue() {\n    return this.state.value;\n  }\n\n  afterGuiAttached() {\n    console.log('dialgue editor after gui');\n  }\n\n  focusIn() {\n    console.log('dialgue editor focus in');\n    this.setState({\n      open: true,\n    });\n    this.inputRef.focus();\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.innerText });\n  }\n\n  render() {\n    return (\n      <div>\n        <Autocomplete\n          options={this.props.values}\n          getOptionLabel={(option) => option}\n          openOnFocus\n          onChange={(event) => this.handleChange(event)}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label={this.state.value}\n              inputRef={(input) => {\n                this.inputRef = input;\n              }}\n              margin='normal'\n              value={this.state.value}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CurrencyEditor.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/CustomDialog.js",[],"/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/components/AddNewUser.js",["201","202","203","204","205","206","207","208"],"import Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { AgGridReact } from 'ag-grid-react';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport NumericEditor from '../components/NumericEditor';\nimport CurrencyEditor from '../components/CurrencyEditor';\n\nimport AppContext from '../context/AppContext';\nimport { DATAURLS } from '../utilities/constants';\nimport { fetchPost } from '../utilities/dataCalls';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    dialogTitle: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      height: '40px',\n      background: 'linear-gradient(to right, #eef2f3, #8e9eab)',\n      boxShadow: '1px 1px 3px #8e9eab',\n    },\n    dialogRoot: {\n      width: '650px !important',\n      height: '500px',\n      //   display: 'flex',\n      //   flexDirection: 'column',\n    },\n    dialogTitleText: {\n      fontFamily: \"'Poppins'\",\n      fontWeight: 700,\n      textTransform: 'uppercase',\n      fontSize: '0.85rem',\n    },\n    dialogContent: {\n      marginTop: '10px',\n      display: 'flex',\n      justifyContent: 'center',\n    },\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      width: '50%',\n      marginBottom: '15px',\n      marginRight: '15px',\n    },\n    button: {\n      marginLeft: '15px',\n    },\n    buttonProgress: { marginLeft: '5px' },\n    formControl: {\n      width: '70%',\n      marginBottom: '15px',\n    },\n    inputGroup: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n    },\n    inputControl: { fontFamily: 'Poppins !important', fontSize: '1rem' },\n  })\n);\n\nconst AddNewUser = ({\n  open,\n  setOpen,\n  parentGridApi,\n  allUsers,\n  allUserRoles,\n  getNewData,\n  columnDefs,\n  title,\n  assetTypes,\n  statusNames,\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [userName, setUserName] = useState();\n  const [userEmail, setUserEmail] = useState();\n  const [userPassword, setUserPassword] = useState();\n  const [emailError, setEmailError] = useState(false);\n  const [invalidEmail, setInvalidEmail] = useState(false);\n  const [userRole, setUserRole] = useState();\n\n  const [enableSubmission, setEnableSubmission] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [gridApi, setGridApi] = useState(null);\n  const appContext = useContext(AppContext);\n\n  const mailformat = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n  useEffect(() => {\n    setUserName();\n    setUserEmail();\n    setUserPassword();\n    setUserRole();\n    setSuccess(false);\n    setError(false);\n    setLoading(false);\n  }, [open]);\n\n  useEffect(() => {\n    if ((userEmail && !userEmail.match(mailformat)) || emailError) {\n      setEnableSubmission(false);\n      return;\n    }\n    if (!userName || !userEmail || !userPassword || !userRole) {\n      setEnableSubmission(false);\n      return;\n    }\n    if (\n      userName &&\n      userEmail.match(mailformat) &&\n      userPassword &&\n      userRole &&\n      !emailError\n    ) {\n      setEnableSubmission(true);\n    }\n  }, [userName, userEmail, userPassword, userRole, emailError, invalidEmail]);\n\n  const handleSubmit = () => {\n    setLoading(true);\n    fetchPost(DATAURLS.USERS.url, {\n      user_name: userName,\n      user_email: userEmail,\n      user_password: userPassword,\n      user_role: userRole,\n      force_reset: true,\n    })\n      .then((response) => {\n        if (response.ok) {\n          setLoading(false);\n          setSuccess(true);\n        } else {\n          setLoading(false);\n          setError(true);\n          setErrorMessage(response.message);\n        }\n      })\n      .catch((err) => {\n        throw err;\n      });\n  };\n\n  return (\n    <Dialog\n      open={open}\n      //   onClose={getNewData(p)}\n      aria-labelledby='alert-dialog-title'\n      aria-describedby='alert-dialog-description'\n      maxWidth='md'\n      className='dialogRoot'\n      classes={{ paper: classes.dialogRoot }}\n    >\n      <DialogTitle id='alert-dialog-title' className={classes.dialogTitle}>\n        <div className={classes.dialogTitleText}>{title}</div>\n      </DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        {!success && !error && (\n          <div className={classes.inputGroup}>\n            <FormControl className={classes.formControl}>\n              <TextField\n                inputProps={{ className: classes.inputControl }}\n                value={userName}\n                onChange={(event) => setUserName(event.target.value)}\n                variant='outlined'\n                required\n                fullWidth\n                id='user_name'\n                label='Full Name'\n                autoFocus\n              />\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <TextField\n                //   autoComplete='fname'\n                error={emailError || invalidEmail}\n                value={userEmail}\n                onChange={(event) => setUserEmail(event.target.value)}\n                onBlur={(event) => {\n                  setEmailError(\n                    allUsers.find((user) => user.user_email === userEmail)\n                  );\n                  setInvalidEmail(!userEmail.match(mailformat));\n                }}\n                variant='outlined'\n                required\n                fullWidth\n                id='user_email'\n                label='Email'\n                helperText={\n                  emailError\n                    ? 'An account already exists for this email !'\n                    : invalidEmail\n                    ? 'Invalid Email'\n                    : ''\n                }\n              />\n            </FormControl>\n            <FormControl className={classes.formControl}>\n              <TextField\n                value={userPassword}\n                onChange={(event) => setUserPassword(event.target.value)}\n                variant='outlined'\n                required\n                fullWidth\n                id='user_password'\n                label='Password'\n                password\n              />\n            </FormControl>\n            <FormControl\n              variant='outlined'\n              required\n              className={classes.formControl}\n            >\n              <InputLabel id='demo-simple-select-outlined-label'>\n                Role\n              </InputLabel>\n              <Select\n                labelId='demo-simple-select-outlined-label'\n                id='demo-simple-select-outlined'\n                value={userRole}\n                onChange={(event) => setUserRole(event.target.value)}\n                label='Role'\n              >\n                {allUserRoles &&\n                  allUserRoles.map((item) => (\n                    <MenuItem value={item.role}>{item.role}</MenuItem>\n                  ))}\n              </Select>\n            </FormControl>\n          </div>\n        )}\n        {success && !error && <div>User creation successful</div>}\n        {!success && error && <div>{errorMessage}</div>}\n      </DialogContent>\n      <DialogActions>\n        {success && (\n          <div className={classes.buttonContainer}>\n            <Button\n              variant='contained'\n              color='primary'\n              className={classes.button}\n              onClick={() => {\n                getNewData(parentGridApi);\n                parentGridApi.deselectAll();\n                setSuccess(false);\n                setOpen(false);\n              }}\n            >\n              Ok!\n            </Button>\n          </div>\n        )}\n        {!success && (\n          <div className={classes.buttonContainer}>\n            <Button\n              variant='contained'\n              onClick={() => setOpen(false)}\n              color='secondary'\n              disabled={loading}\n              className={classes.button}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant='contained'\n              onClick={() => handleSubmit()}\n              color='primary'\n              disabled={!enableSubmission}\n              className={classes.button}\n            >\n              Add\n              {loading && (\n                <CircularProgress\n                  size='1rem'\n                  className={classes.buttonProgress}\n                />\n              )}\n            </Button>\n          </div>\n        )}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AddNewUser;\n","/Users/aravindhsankaranarayanan/Desktop/All_Code.nosync/grid-demo-react/src/pages/ItemTypes.js",["209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226"],{"ruleId":"227","severity":1,"message":"228","line":7,"column":3,"nodeType":"229","messageId":"230","endLine":7,"endColumn":9},{"ruleId":"227","severity":1,"message":"231","line":8,"column":3,"nodeType":"229","messageId":"230","endLine":8,"endColumn":8},{"ruleId":"227","severity":1,"message":"232","line":9,"column":3,"nodeType":"229","messageId":"230","endLine":9,"endColumn":7},{"ruleId":"227","severity":1,"message":"233","line":10,"column":3,"nodeType":"229","messageId":"230","endLine":10,"endColumn":14},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"227","severity":1,"message":"238","line":15,"column":8,"nodeType":"229","messageId":"230","endLine":15,"endColumn":15},{"ruleId":"227","severity":1,"message":"239","line":18,"column":8,"nodeType":"229","messageId":"230","endLine":18,"endColumn":24},{"ruleId":"227","severity":1,"message":"240","line":19,"column":8,"nodeType":"229","messageId":"230","endLine":19,"endColumn":17},{"ruleId":"227","severity":1,"message":"241","line":20,"column":8,"nodeType":"229","messageId":"230","endLine":20,"endColumn":16},{"ruleId":"227","severity":1,"message":"242","line":22,"column":8,"nodeType":"229","messageId":"230","endLine":22,"endColumn":20},{"ruleId":"227","severity":1,"message":"243","line":29,"column":29,"nodeType":"229","messageId":"230","endLine":29,"endColumn":37},{"ruleId":"227","severity":1,"message":"244","line":34,"column":20,"nodeType":"229","messageId":"230","endLine":34,"endColumn":26},{"ruleId":"227","severity":1,"message":"245","line":217,"column":9,"nodeType":"229","messageId":"230","endLine":217,"endColumn":14},{"ruleId":"227","severity":1,"message":"246","line":22,"column":8,"nodeType":"229","messageId":"230","endLine":22,"endColumn":12},{"ruleId":"227","severity":1,"message":"247","line":28,"column":23,"nodeType":"229","messageId":"230","endLine":28,"endColumn":35},{"ruleId":"227","severity":1,"message":"248","line":197,"column":22,"nodeType":"229","messageId":"230","endLine":197,"endColumn":35},{"ruleId":"227","severity":1,"message":"249","line":198,"column":33,"nodeType":"229","messageId":"230","endLine":198,"endColumn":57},{"ruleId":"227","severity":1,"message":"250","line":199,"column":10,"nodeType":"229","messageId":"230","endLine":199,"endColumn":21},{"ruleId":"227","severity":1,"message":"251","line":199,"column":23,"nodeType":"229","messageId":"230","endLine":199,"endColumn":37},{"ruleId":"227","severity":1,"message":"252","line":200,"column":23,"nodeType":"229","messageId":"230","endLine":200,"endColumn":37},{"ruleId":"227","severity":1,"message":"253","line":201,"column":25,"nodeType":"229","messageId":"230","endLine":201,"endColumn":41},{"ruleId":"254","severity":1,"message":"255","line":238,"column":6,"nodeType":"256","endLine":238,"endColumn":25,"suggestions":"257"},{"ruleId":"254","severity":1,"message":"255","line":249,"column":6,"nodeType":"256","endLine":249,"endColumn":15,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":531,"column":27,"nodeType":"261","messageId":"262","endLine":531,"endColumn":29},{"ruleId":"259","severity":1,"message":"263","line":613,"column":74,"nodeType":"261","messageId":"264","endLine":613,"endColumn":76},{"ruleId":"259","severity":1,"message":"260","line":620,"column":34,"nodeType":"261","messageId":"262","endLine":620,"endColumn":36},{"ruleId":"227","severity":1,"message":"244","line":23,"column":10,"nodeType":"229","messageId":"230","endLine":23,"endColumn":16},{"ruleId":"227","severity":1,"message":"265","line":195,"column":10,"nodeType":"229","messageId":"230","endLine":195,"endColumn":15},{"ruleId":"227","severity":1,"message":"266","line":206,"column":9,"nodeType":"229","messageId":"230","endLine":206,"endColumn":17},{"ruleId":"227","severity":1,"message":"267","line":207,"column":9,"nodeType":"229","messageId":"230","endLine":207,"endColumn":16},{"ruleId":"254","severity":1,"message":"268","line":214,"column":6,"nodeType":"256","endLine":214,"endColumn":8,"suggestions":"269"},{"ruleId":"270","severity":1,"message":"271","line":316,"column":21,"nodeType":"272","endLine":320,"endColumn":23},{"ruleId":"227","severity":1,"message":"273","line":3,"column":3,"nodeType":"229","messageId":"230","endLine":3,"endColumn":13},{"ruleId":"227","severity":1,"message":"274","line":4,"column":3,"nodeType":"229","messageId":"230","endLine":4,"endColumn":11},{"ruleId":"227","severity":1,"message":"275","line":5,"column":3,"nodeType":"229","messageId":"230","endLine":5,"endColumn":10},{"ruleId":"227","severity":1,"message":"276","line":8,"column":3,"nodeType":"229","messageId":"230","endLine":8,"endColumn":9},{"ruleId":"227","severity":1,"message":"238","line":18,"column":8,"nodeType":"229","messageId":"230","endLine":18,"endColumn":15},{"ruleId":"227","severity":1,"message":"277","line":19,"column":8,"nodeType":"229","messageId":"230","endLine":19,"endColumn":14},{"ruleId":"227","severity":1,"message":"278","line":20,"column":8,"nodeType":"229","messageId":"230","endLine":20,"endColumn":16},{"ruleId":"227","severity":1,"message":"247","line":24,"column":23,"nodeType":"229","messageId":"230","endLine":24,"endColumn":35},{"ruleId":"227","severity":1,"message":"279","line":31,"column":8,"nodeType":"229","messageId":"230","endLine":31,"endColumn":24},{"ruleId":"227","severity":1,"message":"280","line":34,"column":8,"nodeType":"229","messageId":"230","endLine":34,"endColumn":24},{"ruleId":"227","severity":1,"message":"281","line":154,"column":10,"nodeType":"229","messageId":"230","endLine":154,"endColumn":17},{"ruleId":"227","severity":1,"message":"282","line":160,"column":22,"nodeType":"229","messageId":"230","endLine":160,"endColumn":35},{"ruleId":"227","severity":1,"message":"249","line":163,"column":33,"nodeType":"229","messageId":"230","endLine":163,"endColumn":57},{"ruleId":"227","severity":1,"message":"283","line":164,"column":29,"nodeType":"229","messageId":"230","endLine":164,"endColumn":49},{"ruleId":"227","severity":1,"message":"284","line":165,"column":10,"nodeType":"229","messageId":"230","endLine":165,"endColumn":22},{"ruleId":"227","severity":1,"message":"285","line":235,"column":9,"nodeType":"229","messageId":"230","endLine":235,"endColumn":27},{"ruleId":"259","severity":1,"message":"263","line":412,"column":74,"nodeType":"261","messageId":"264","endLine":412,"endColumn":76},{"ruleId":"259","severity":1,"message":"260","line":420,"column":34,"nodeType":"261","messageId":"262","endLine":420,"endColumn":36},{"ruleId":"227","severity":1,"message":"265","line":78,"column":10,"nodeType":"229","messageId":"230","endLine":78,"endColumn":15},{"ruleId":"227","severity":1,"message":"286","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":14},{"ruleId":"227","severity":1,"message":"287","line":6,"column":8,"nodeType":"229","messageId":"230","endLine":6,"endColumn":14},{"ruleId":"227","severity":1,"message":"288","line":7,"column":8,"nodeType":"229","messageId":"230","endLine":7,"endColumn":21},{"ruleId":"227","severity":1,"message":"289","line":8,"column":8,"nodeType":"229","messageId":"230","endLine":8,"endColumn":21},{"ruleId":"227","severity":1,"message":"290","line":9,"column":8,"nodeType":"229","messageId":"230","endLine":9,"endColumn":25},{"ruleId":"227","severity":1,"message":"291","line":10,"column":8,"nodeType":"229","messageId":"230","endLine":10,"endColumn":19},{"ruleId":"227","severity":1,"message":"292","line":23,"column":31,"nodeType":"229","messageId":"230","endLine":23,"endColumn":39},{"ruleId":"227","severity":1,"message":"293","line":156,"column":7,"nodeType":"229","messageId":"230","endLine":156,"endColumn":19},{"ruleId":"227","severity":1,"message":"294","line":176,"column":10,"nodeType":"229","messageId":"230","endLine":176,"endColumn":26},{"ruleId":"227","severity":1,"message":"295","line":176,"column":28,"nodeType":"229","messageId":"230","endLine":176,"endColumn":47},{"ruleId":"227","severity":1,"message":"296","line":183,"column":10,"nodeType":"229","messageId":"230","endLine":183,"endColumn":14},{"ruleId":"227","severity":1,"message":"297","line":184,"column":17,"nodeType":"229","messageId":"230","endLine":184,"endColumn":25},{"ruleId":"254","severity":1,"message":"298","line":209,"column":6,"nodeType":"256","endLine":209,"endColumn":15,"suggestions":"299"},{"ruleId":"227","severity":1,"message":"300","line":14,"column":8,"nodeType":"229","messageId":"230","endLine":14,"endColumn":19},{"ruleId":"227","severity":1,"message":"301","line":18,"column":8,"nodeType":"229","messageId":"230","endLine":18,"endColumn":20},{"ruleId":"227","severity":1,"message":"302","line":23,"column":8,"nodeType":"229","messageId":"230","endLine":23,"endColumn":31},{"ruleId":"227","severity":1,"message":"303","line":26,"column":8,"nodeType":"229","messageId":"230","endLine":26,"endColumn":18},{"ruleId":"227","severity":1,"message":"304","line":27,"column":8,"nodeType":"229","messageId":"230","endLine":27,"endColumn":19},{"ruleId":"227","severity":1,"message":"305","line":31,"column":3,"nodeType":"229","messageId":"230","endLine":31,"endColumn":12},{"ruleId":"227","severity":1,"message":"292","line":32,"column":3,"nodeType":"229","messageId":"230","endLine":32,"endColumn":11},{"ruleId":"227","severity":1,"message":"306","line":33,"column":3,"nodeType":"229","messageId":"230","endLine":33,"endColumn":14},{"ruleId":"227","severity":1,"message":"265","line":98,"column":10,"nodeType":"229","messageId":"230","endLine":98,"endColumn":15},{"ruleId":"227","severity":1,"message":"307","line":102,"column":10,"nodeType":"229","messageId":"230","endLine":102,"endColumn":18},{"ruleId":"227","severity":1,"message":"308","line":102,"column":20,"nodeType":"229","messageId":"230","endLine":102,"endColumn":31},{"ruleId":"227","severity":1,"message":"309","line":104,"column":10,"nodeType":"229","messageId":"230","endLine":104,"endColumn":31},{"ruleId":"227","severity":1,"message":"310","line":104,"column":33,"nodeType":"229","messageId":"230","endLine":104,"endColumn":57},{"ruleId":"254","severity":1,"message":"311","line":122,"column":6,"nodeType":"256","endLine":122,"endColumn":14,"suggestions":"312"},{"ruleId":"227","severity":1,"message":"313","line":36,"column":9,"nodeType":"229","messageId":"230","endLine":36,"endColumn":28},{"ruleId":"227","severity":1,"message":"301","line":2,"column":8,"nodeType":"229","messageId":"230","endLine":2,"endColumn":20},{"ruleId":"227","severity":1,"message":"314","line":10,"column":9,"nodeType":"229","messageId":"230","endLine":10,"endColumn":17},{"ruleId":"227","severity":1,"message":"290","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":25},{"ruleId":"227","severity":1,"message":"315","line":11,"column":10,"nodeType":"229","messageId":"230","endLine":11,"endColumn":21},{"ruleId":"227","severity":1,"message":"316","line":20,"column":8,"nodeType":"229","messageId":"230","endLine":20,"endColumn":21},{"ruleId":"227","severity":1,"message":"317","line":21,"column":8,"nodeType":"229","messageId":"230","endLine":21,"endColumn":22},{"ruleId":"227","severity":1,"message":"318","line":106,"column":10,"nodeType":"229","messageId":"230","endLine":106,"endColumn":17},{"ruleId":"227","severity":1,"message":"319","line":106,"column":19,"nodeType":"229","messageId":"230","endLine":106,"endColumn":29},{"ruleId":"227","severity":1,"message":"320","line":107,"column":9,"nodeType":"229","messageId":"230","endLine":107,"endColumn":19},{"ruleId":"254","severity":1,"message":"321","line":139,"column":6,"nodeType":"256","endLine":139,"endColumn":77,"suggestions":"322"},{"ruleId":"227","severity":1,"message":"273","line":3,"column":3,"nodeType":"229","messageId":"230","endLine":3,"endColumn":13},{"ruleId":"227","severity":1,"message":"274","line":4,"column":3,"nodeType":"229","messageId":"230","endLine":4,"endColumn":11},{"ruleId":"227","severity":1,"message":"275","line":5,"column":3,"nodeType":"229","messageId":"230","endLine":5,"endColumn":10},{"ruleId":"227","severity":1,"message":"323","line":7,"column":3,"nodeType":"229","messageId":"230","endLine":7,"endColumn":10},{"ruleId":"227","severity":1,"message":"276","line":8,"column":3,"nodeType":"229","messageId":"230","endLine":8,"endColumn":9},{"ruleId":"227","severity":1,"message":"324","line":11,"column":36,"nodeType":"229","messageId":"230","endLine":11,"endColumn":44},{"ruleId":"227","severity":1,"message":"277","line":15,"column":8,"nodeType":"229","messageId":"230","endLine":15,"endColumn":14},{"ruleId":"227","severity":1,"message":"278","line":16,"column":8,"nodeType":"229","messageId":"230","endLine":16,"endColumn":16},{"ruleId":"227","severity":1,"message":"247","line":20,"column":23,"nodeType":"229","messageId":"230","endLine":20,"endColumn":35},{"ruleId":"227","severity":1,"message":"325","line":28,"column":8,"nodeType":"229","messageId":"230","endLine":28,"endColumn":22},{"ruleId":"227","severity":1,"message":"280","line":29,"column":8,"nodeType":"229","messageId":"230","endLine":29,"endColumn":24},{"ruleId":"227","severity":1,"message":"326","line":31,"column":10,"nodeType":"229","messageId":"230","endLine":31,"endColumn":18},{"ruleId":"227","severity":1,"message":"281","line":94,"column":10,"nodeType":"229","messageId":"230","endLine":94,"endColumn":17},{"ruleId":"227","severity":1,"message":"327","line":96,"column":10,"nodeType":"229","messageId":"230","endLine":96,"endColumn":20},{"ruleId":"227","severity":1,"message":"328","line":96,"column":22,"nodeType":"229","messageId":"230","endLine":96,"endColumn":35},{"ruleId":"227","severity":1,"message":"282","line":98,"column":22,"nodeType":"229","messageId":"230","endLine":98,"endColumn":35},{"ruleId":"227","severity":1,"message":"329","line":103,"column":20,"nodeType":"229","messageId":"230","endLine":103,"endColumn":31},{"ruleId":"254","severity":1,"message":"330","line":117,"column":6,"nodeType":"256","endLine":117,"endColumn":8,"suggestions":"331"},"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","no-native-reassign",["332"],"no-negated-in-lhs",["333"],"'Divider' is defined but never used.","'ChevronRightIcon' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'CategoryIcon' is defined but never used.","'useState' is defined but never used.","'Router' is defined but never used.","'theme' is assigned a value but never used.","'XLSX' is defined but never used.","'AgGridColumn' is defined but never used.","'setAssetTypes' is assigned a value but never used.","'setAssetTypeFieldMapping' is assigned a value but never used.","'statusCodes' is assigned a value but never used.","'setStatusCodes' is assigned a value but never used.","'setStatusNames' is assigned a value but never used.","'setPalletNumbers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gridApi'. Either include it or remove the dependency array.","ArrayExpression",["334"],["335"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'error' is assigned a value but never used.","'location' is assigned a value but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'appContext'. Either include it or remove the dependency array.",["336"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'faDownload' is defined but never used.","'faUpload' is defined but never used.","'faTasks' is defined but never used.","'faCopy' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'BulkUpdateDialog' is defined but never used.","'FileUploadDialog' is defined but never used.","'loading' is assigned a value but never used.","'setRowDataAPI' is assigned a value but never used.","'setSelectedAssetType' is assigned a value but never used.","'enableDelete' is assigned a value but never used.","'deleteConfirmation' is assigned a value but never used.","'Button' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'fetchGet' is defined but never used.","'handleSubmit' is assigned a value but never used.","'enableSubmission' is assigned a value but never used.","'setEnableSubmission' is assigned a value but never used.","'cols' is assigned a value but never used.","'setSteps' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'allAssets' and 'data'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAssetIDRows' needs the current value of 'data'.",["337"],"'DualListBox' is defined but never used.","'CustomDialog' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'IconButton' is defined but never used.","'CommentIcon' is defined but never used.","'fetchPost' is defined but never used.","'fetchDelete' is defined but never used.","'selected' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'selectedColumnOptions' is assigned a value but never used.","'setSelectedColumnOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.data.Fields'. Either include it or remove the dependency array. If 'setEnableSubmission' needs the current value of 'props.data.Fields', you can also switch to useReducer instead of useState and read 'props.data.Fields' in the reducer.",["338"],"'highlightAllOnFocus' is assigned a value but never used.","'inputRef' is assigned a value but never used.","'AgGridReact' is defined but never used.","'NumericEditor' is defined but never used.","'CurrencyEditor' is defined but never used.","'gridApi' is assigned a value but never used.","'setGridApi' is assigned a value but never used.","'appContext' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'mailformat'. Either include it or remove the dependency array.",["339"],"'faTrash' is defined but never used.","'useTheme' is defined but never used.","'CustomDropdown' is defined but never used.","'AppTheme' is defined but never used.","'allColumns' is assigned a value but never used.","'setAllColumns' is assigned a value but never used.","'setPageSize' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getNewData'. Either include it or remove the dependency array.",["340"],"no-global-assign","no-unsafe-negation",{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [gridApi, selectedAssetType]",{"range":"355","text":"356"},"Update the dependencies array to be: [gridApi, loading]",{"range":"357","text":"358"},"Update the dependencies array to be: [appContext]",{"range":"359","text":"360"},"Update the dependencies array to be: [allAssets, data, success]",{"range":"361","text":"362"},"Update the dependencies array to be: [fields, props.data.Fields]",{"range":"363","text":"364"},"Update the dependencies array to be: [userName, userEmail, userPassword, userRole, emailError, invalidEmail, mailformat]",{"range":"365","text":"366"},"Update the dependencies array to be: [getNewData]",{"range":"367","text":"368"},[7520,7539],"[gridApi, selectedAssetType]",[7737,7746],"[gridApi, loading]",[5970,5972],"[appContext]",[5660,5669],"[allAssets, data, success]",[3820,3828],"[fields, props.data.Fields]",[4091,4162],"[userName, userEmail, userPassword, userRole, emailError, invalidEmail, mailformat]",[3392,3394],"[getNewData]"]